{
  "name": "ozord_telegram_core_access",
  "nodes": [
    {
      "parameters": {
        "jsCode": "/* INPUT: { update, requireWhitelist?: boolean }\n   OUTPUT:\n   - context: { user_id, chat_id, message_text, callback_data, document, callback_query_id }\n*/\nconst u = $json.update || {};\n// извлекаем chat/user из разных типов апдейта\nconst msg = u.message || u.edited_message || u.channel_post || null;\nconst cbq = u.callback_query || null;\nconst doc = msg && msg.document ? msg.document : null;\nconst chat_id = cbq ? cbq.message?.chat?.id : msg?.chat?.id;\nconst from = cbq ? cbq.from : (msg ? msg.from : null);\nconst user_id = from?.id;\nconst message_text = msg?.text ?? msg?.caption ?? null;\nconst callback_data = cbq?.data ?? null;\nconst callback_query_id = cbq?.id ?? null;\nreturn [{ json: { context: { user_id, chat_id, message_text, callback_data, document: doc, callback_query_id }, requireWhitelist: !!$json.requireWhitelist } }];"
      },
      "id": "extract_update",
      "name": "Extract & Normalize Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        200
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "ozon:acl:superuser"
      },
      "id": "redis_get_su",
      "name": "Redis Get: superuser[]",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      },
      "position": [
        -600,
        80
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "ozon:acl:admin"
      },
      "id": "redis_get_admin",
      "name": "Redis Get: admin[]",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      },
      "position": [
        -600,
        200
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "ozon:acl:whitelist"
      },
      "id": "redis_get_wl",
      "name": "Redis Get: whitelist[]",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      },
      "position": [
        -600,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "const ctx = $('Extract & Normalize Update').first().json.context || {};\nfunction parseList(n){\n  try{ const raw = $(n).first().json.value; if(!raw) return []; const arr = JSON.parse(raw); return Array.isArray(arr)? arr: []; }catch(e){ return []; }\n}\nconst su = parseList('Redis Get: superuser[]');\nconst ad = parseList('Redis Get: admin[]');\nconst wl = parseList('Redis Get: whitelist[]');\nconst is_superuser = su.includes(ctx.user_id);\nconst is_admin     = is_superuser || ad.includes(ctx.user_id);\nconst in_whitelist = is_superuser || is_admin || wl.includes(ctx.user_id);\nreturn [{ json: { ...ctx, is_superuser, is_admin, in_whitelist } }];"
      },
      "id": "compute_acl",
      "name": "Compute ACL Flags",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -360,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.in_whitelist || !$('Extract & Normalize Update').first().json.requireWhitelist }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "if_allowed",
      "name": "Allowed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -120,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { ok: false, reason: 'not_whitelisted', context: $json } }];"
      },
      "id": "return_denied",
      "name": "Return (denied)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { ok: true, context: $json } }];"
      },
      "id": "return_allowed",
      "name": "Return (allowed)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        320
      ]
    }
  ],
  "connections": {
    "Extract & Normalize Update": {
      "main": [
        [
          {
            "node": "Redis Get: superuser[]",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis Get: admin[]",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis Get: whitelist[]",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Get: superuser[]": {
      "main": [
        [
          {
            "node": "Compute ACL Flags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Get: admin[]": {
      "main": [
        [
          {
            "node": "Compute ACL Flags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Get: whitelist[]": {
      "main": [
        [
          {
            "node": "Compute ACL Flags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compute ACL Flags": {
      "main": [
        [
          {
            "node": "Allowed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Allowed?": {
      "main": [
        [
          {
            "node": "Return (denied)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return (allowed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "active": false
}
