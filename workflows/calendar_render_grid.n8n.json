{
  "name": "calendar_render_grid",
  "nodes": [
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:csv"
      },
      "id": "fetch_session",
      "name": "Fetch Session (csv)",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } },
      "position": [-560, 120]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:dates"
      },
      "id": "fetch_selected",
      "name": "Get Selected Dates",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } },
      "position": [-560, 300]
    },
    {
      "parameters": {
        "jsCode": "// –°–æ–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞\nconst chat_id = $('Extract User Data').first().json.chat_id;\nconst user_id = $('Extract User Data').first().json.user_id;\n// —Å–µ—Å—Å–∏—è\nlet sess={}; try{ const raw=$('Fetch Session (csv)').first().json.value; sess = raw? JSON.parse(raw):{}; }catch(e){ sess={}; }\nconst { from, to, months=[], daysByMonth={} } = sess || {};\n// month/min/max (–∏–∑ Ensure Month / Calc Initial Month)\nlet month  = $('Ensure Month (smart)').first()?.json?.month || $('Calc Initial Month').first()?.json?.month;\nlet minMonth = $('Ensure Month (smart)').first()?.json?.minMonth || $('Calc Initial Month').first()?.json?.minMonth || months[0];\nlet maxMonth = $('Ensure Month (smart)').first()?.json?.maxMonth || $('Calc Initial Month').first()?.json?.maxMonth || months[months.length-1];\nif(!month){ month = months[0]; }\n// –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã\nlet selected=[]; try{ const raw=$('Get Selected Dates').first()?.json?.value; selected = raw? JSON.parse(raw):[]; }catch(e){ selected=[]; }\n// –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (YYYY-MM-DD)\nconst availDays = new Set((daysByMonth[month]||[]).map(d => `${month}-${String(d).padStart(2,'0')}`));\nreturn [{ json: { chat_id, user_id, from, to, month, minMonth, maxMonth, selectedDates: selected, availDays: Array.from(availDays) } }];"
      },
      "id": "prepare_model",
      "name": "Prepare Calendar Model",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-280, 200]
    },
    {
      "parameters": {
        "jsCode": "function daysInMonth(ym){ const [y,m]=ym.split('-').map(Number); return new Date(y, m, 0).getDate(); }\nconst { chat_id, from, to, month, minMonth, maxMonth, selectedDates=[], availDays=[] } = $json;\nconst setAvail = new Set(availDays);\nconst setSel   = new Set(Array.isArray(selectedDates)? selectedDates: []);\nconst total = daysInMonth(month);\nconst hasPrev = month > minMonth;\nconst hasNext = month < maxMonth;\n// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—á—ë—Ç—á–∏–∫ ‚Äî –ø–æ–∫–∞ –±–µ–∑ ¬´–∫—Ä–∞—Å–æ—Ç—ã¬ª (–æ—Ñ–æ—Ä–º–∏–º –≤ –∫–æ–º–º–∏—Ç–µ 5)\nconst header = `üìÖ –î–∞—Ç—ã –ø–æ –æ—Ç—á—ë—Ç—É\\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ: <b>${from||'-'}</b> ‚Äî <b>${to||'-'}</b>\\n–ú–µ—Å—è—Ü: <b>${month}</b>`;\n// –ù–∞–≤–∏–≥–∞—Ü–∏—è\nconst navRow = [\n  { text: hasPrev ? '‚óÄ' : '‚ñ™', callback_data: hasPrev ? `cal:${month}:prev` : 'noop' },\n  { text: month,                callback_data: 'noop' },\n  { text: hasNext ? '‚ñ∂' : '‚ñ™',  callback_data: hasNext ? `cal:${month}:next` : 'noop' }\n];\n// –°–µ—Ç–∫–∞ 7√ó5 (–ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞); –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø—É—Å—Ç—ã–µ ‚ñ´ noop\nconst rows = [];\nlet day=1;\nwhile(day<=total){\n  const row=[];\n  for(let i=0;i<7;i++){\n    if(day>total){ row.push({ text:'‚ñ´', callback_data:'noop' }); continue; }\n    const dd = String(day).padStart(2,'0');\n    const full = `${month}-${dd}`;\n    const isAvail = setAvail.has(full);\n    const isSel   = setSel.has(full);\n    if(isAvail){\n      row.push({ text: (isSel? `‚òë ${dd}` : `‚ñ´ ${dd}`), callback_data: `date:${full}` });\n    } else {\n      // –¥–µ–Ω—å –≤–Ω–µ –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω–∞—è —Ç–æ—á–∫–∞\n      row.push({ text: `‚Ä¢ ${dd}`, callback_data: 'noop' });\n    }\n    day++;\n  }\n  rows.push(row);\n}\n// –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π\nconst actionRow = [ { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'dates:done' }, { text: '‚Ü∫ –°–±—Ä–æ—Å', callback_data: 'dates:reset' } ];\nconst reply_markup = { inline_keyboard: [ navRow, ...rows, actionRow ] };\nconst text = header;\nreturn [{ json: { chat_id, text, reply_markup } }];"
      },
      "id": "render_grid",
      "name": "Render Calendar Grid",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [40, 200]
    },
    {
      "parameters": {
        "workflowId": "ui_orchestrator (send-or-edit)",
        "options": {},
        "jsonParameters": true
      },
      "id": "call_ui_orchestrator",
      "name": "UI Orchestrator (send-or-edit)",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [300, 200]
    }
  ],
  "connections": {
    "Fetch Session (csv)": { "main": [ [ { "node": "Prepare Calendar Model", "type": "main", "index": 0 } ] ] },
    "Get Selected Dates": { "main": [ [ { "node": "Prepare Calendar Model", "type": "main", "index": 0 } ] ] },
    "Prepare Calendar Model": { "main": [ [ { "node": "Render Calendar Grid", "type": "main", "index": 0 } ] ] },
    "Render Calendar Grid": { "main": [ [ { "node": "UI Orchestrator (send-or-edit)", "type": "main", "index": 0 } ] ] }
  },
  "pinData": {},
  "active": false
}
