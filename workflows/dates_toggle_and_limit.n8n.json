{
  "name": "dates_toggle_and_limit",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Извлечь YYYY-MM-DD из callback_data вида 'date:YYYY-MM-DD'\nconst data = $('Extract User Data').first().json || {};\nconst cb = data.callback_data || '';\nconst m = cb.match(/^date:(\\d{4}-\\d{2}-\\d{2})$/);\nif (!m) { return [{ json: { valid: false, reason: 'bad_format' } }]; }\nreturn [{ json: { valid: true, picked: m[1], user_id: data.user_id, chat_id: data.chat_id, callback_query_id: data.callback_query_id } }];"
      },
      "id": "parse_callback",
      "name": "Parse Callback (date:YYYY-MM-DD)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-820, 180]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:csv"
      },
      "id": "get_session",
      "name": "Get Session (csv)",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } },
      "position": [-560, 60]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "value",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:dates"
      },
      "id": "get_selected",
      "name": "Get Selected Dates",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } },
      "position": [-560, 300]
    },
    {
      "parameters": {
        "jsCode": "// Валидируем, что выбранная дата доступна в daysByMonth.\n// Сессия из Redis содержит {from,to,months,daysByMonth}\nconst picked = $('Parse Callback (date:YYYY-MM-DD)').first().json.picked;\nlet sess = {};\ntry { const raw = $('Get Session (csv)').first().json.value; sess = raw ? JSON.parse(raw) : {}; } catch(e) { sess = {}; }\nconst { daysByMonth = {} } = sess;\nconst ym = picked?.slice(0,7);\nconst dd = Number(picked?.slice(8,10));\nconst avail = Array.isArray(daysByMonth[ym]) && daysByMonth[ym].includes(dd);\nreturn [{ json: { picked, isAvailable: !!avail } }];"
      },
      "id": "validate_available",
      "name": "Validate Available",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-320, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "typeValidation": "strict", "version": 2 },
          "conditions": [
            { "leftValue": "={{ $json.isAvailable }}", "rightValue": "true", "operator": { "type": "boolean", "operation": "true", "singleValue": true } }
          ],
          "combinator": "and"
        }
      },
      "id": "if_is_available",
      "name": "Is Available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-80, 180]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"Эта дата недоступна в отчёте\",\n  \"show_alert\": false\n}"
      },
      "id": "answer_unavailable",
      "name": "AnswerCallback (unavailable)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [160, 60]
    },
    {
      "parameters": {
        "jsCode": "// Тогглим дату с лимитом 3.\nconst picked = $('Parse Callback (date:YYYY-MM-DD)').first().json.picked;\nlet selected = [];\ntry { const raw = $('Get Selected Dates').first().json.value; selected = raw ? JSON.parse(raw) : []; } catch(e) { selected = []; }\n// Если уже выбрана — снимаем\nif (selected.includes(picked)) {\n  selected = selected.filter(d => d !== picked);\n  return [{ json: { changed: true, reason: 'removed', selected } }];\n}\n// Если ещё не выбрана — добавляем, но с лимитом 3\nif (selected.length >= 3) {\n  return [{ json: { changed: false, reason: 'limit', selected } }];\n}\nselected.push(picked);\n// Упорядочим по дате для стабильности\nselected.sort();\nreturn [{ json: { changed: true, reason: 'added', selected } }];"
      },
      "id": "toggle_with_limit",
      "name": "Toggle with Limit (max 3)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [160, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "typeValidation": "strict", "version": 2 },
          "conditions": [
            { "leftValue": "={{ $json.changed }}", "rightValue": "false", "operator": { "type": "boolean", "operation": "false", "singleValue": true } },
            { "leftValue": "={{ $json.reason }}", "rightValue": "limit", "operator": { "type": "string", "operation": "equals" } }
          ],
          "combinator": "and"
        }
      },
      "id": "if_limit",
      "name": "Is Limit Hit?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [420, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"Можно выбрать максимум 3 даты\",\n  \"show_alert\": false\n}"
      },
      "id": "answer_limit",
      "name": "AnswerCallback (limit 3)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [660, 220]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:dates",
        "value": "={{ JSON.stringify($json.selected) }}"
      },
      "id": "persist_selected",
      "name": "Persist Selected Dates",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } },
      "position": [420, 460]
    },
    {
      "parameters": {
        "workflowId": "calendar_render_grid",
        "options": {},
        "jsonParameters": true
      },
      "id": "rerender_calendar",
      "name": "Re-render Calendar Grid",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [660, 460]
    }
  ],
  "connections": {
    "Parse Callback (date:YYYY-MM-DD)": { "main": [ [ { "node": "Get Session (csv)", "type": "main", "index": 0 }, { "node": "Get Selected Dates", "type": "main", "index": 0 } ] ] },
    "Get Session (csv)": { "main": [ [ { "node": "Validate Available", "type": "main", "index": 0 } ] ] },
    "Validate Available": { "main": [ [ { "node": "Is Available?", "type": "main", "index": 0 } ] ] },
    "Is Available?": {
      "main": [
        [ { "node": "Toggle with Limit (max 3)", "type": "main", "index": 0 } ],
        [ { "node": "AnswerCallback (unavailable)", "type": "main", "index": 0 } ]
      ]
    },
    "Get Selected Dates": { "main": [ [ { "node": "Toggle with Limit (max 3)", "type": "main", "index": 0 } ] ] },
    "Toggle with Limit (max 3)": { "main": [ [ { "node": "Is Limit Hit?", "type": "main", "index": 0 }, { "node": "Persist Selected Dates", "type": "main", "index": 0 } ] ] },
    "Is Limit Hit?": { 
      "main": [ 
        [ { "node": "AnswerCallback (limit 3)", "type": "main", "index": 0 } ],
        []
      ] 
    },
    "Persist Selected Dates": { "main": [ [ { "node": "Re-render Calendar Grid", "type": "main", "index": 0 } ] ] }
  },
  "pinData": {},
  "active": false
}
