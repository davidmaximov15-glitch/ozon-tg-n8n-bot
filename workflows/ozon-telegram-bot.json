{
  "name": "Ozon Telegram Bot - Orders Analytics (patched, aligned)",
  "nodes": [
    {
      "parameters": {
        "updates": ["message", "callback_query"],
        "additionalFields": { "download": true }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [100, 100],
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },

    {
      "parameters": {
        "assignments": {
          "assignments": [
            { "id": "telegram-bot-token-field", "name": "TELEGRAM_BOT_TOKEN", "value": "YOUR_TELEGRAM_BOT_TOKEN_HERE", "type": "string" },
            { "id": "superuser-ids-field", "name": "SUPERUSER_IDS", "value": "user_id_1,user_id_2", "type": "string" }
          ]
        },
        "includeOtherFields": true
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [320, 100],
      "id": "config-set-node-001",
      "name": "Config"
    },

    {
      "parameters": {
        "jsCode": "// üîê –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò\nconst token = $json.TELEGRAM_BOT_TOKEN;\nconst superusers = $json.SUPERUSER_IDS;\nif (!token || token === 'YOUR_TELEGRAM_BOT_TOKEN_HERE') {\n  throw new Error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Config node');\n}\nif (!superusers || superusers.trim() === '' || superusers === 'user_id_1,user_id_2') {\n  throw new Error('‚ùå SUPERUSER_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Config node (–∑–∞–º–µ–Ω–∏ user_id_1,user_id_2 –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)');\n}\nreturn { json: $json, binary: $binary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [540, 100],
      "id": "validate-config-node-001",
      "name": "Validate Config"
    },

    {
      "parameters": {
        "jsCode": "// Extract user data from Telegram Trigger\nconst telegramData = $('Telegram Trigger').first().json;\nconst message = telegramData.message;\nconst callback = telegramData.callback_query;\nconst userId = message?.from?.id || callback?.from?.id;\nconst chatId = message?.chat?.id || callback?.message?.chat?.id;\nconst messageText = message?.text || '';\nconst callbackData = callback?.data || '';\nconst document = message?.document || null;\nconst callbackQueryId = callback?.id || '';\nreturn { json: { ...$json, user_id: String(userId), chat_id: String(chatId), message_text: messageText, callback_data: callbackData, callback_query_id: callbackQueryId, document: document }, binary: $binary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [760, 100],
      "id": "b2c3d4e5-2345-6789-abcd-ef0123456789",
      "name": "Extract User Data"
    },

    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:whitelist:{{ $json.user_id }}",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [980, 100],
      "id": "c3d4e5f6-3456-7890-bcde-f01234567890",
      "name": "Check Whitelist",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },

    {
      "parameters": {
        "jsCode": "// üîê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê\nconst whitelistValue = $json.value;\nconst userId = $('Extract User Data').first().json.user_id;\nconst configSuperusers = $('Config').first().json.SUPERUSER_IDS || '';\nconst superuserIds = configSuperusers.split(',').map(id => id.trim()).filter(id => id);\nconst isSuperuser = superuserIds.includes(userId);\nconst isAdmin = whitelistValue === '1';\nif (!isSuperuser && !isAdmin) { throw new Error('‚õî Access denied. Only superusers and admins can use this bot.'); }\nreturn { json: { ...$('Extract User Data').first().json, is_superuser: isSuperuser, is_admin: isAdmin, redis_value: whitelistValue } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 100],
      "id": "validate-whitelist-code",
      "name": "Validate Whitelist"
    },

    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 },
          "conditions": [
            {
              "id": "is-superuser-or-admin",
              "leftValue": "={{ $json.is_superuser === true || $json.is_admin === true }}",
              "rightValue": "true",
              "operator": { "type": "boolean", "operation": "true", "singleValue": true }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1420, 100],
      "id": "d4e5f6a7-4567-8901-cdef-012345678901",
      "name": "Is Authorized?"
    },

    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:admins:{{ $('Extract User Data').first().json.user_id }}",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1640, 100],
      "id": "f6a7b8c9-6789-0123-ef01-234567890123",
      "name": "Check Admin",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },

    {
      "parameters": {
        "chatId": "={{ $('Extract User Data').first().json.chat_id }}",
        "text": "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
        "additionalFields": { "appendAttribution": false, "parse_mode": "HTML" }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1640, 260],
      "id": "e5f6a7b8-5678-9012-def0-123456789012",
      "name": "Unauthorized Response",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },

    {
      "parameters": {
        "rules": {
          "values": [
            { "outputKey": "Start", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.message_text }}", "rightValue": "/start", "operator": { "type": "string", "operation": "equals" } }], "combinator": "and" } },
            { "outputKey": "CSV", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [
              { "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}", "rightValue": "text/csv", "operator": { "type": "string", "operation": "equals" } },
              { "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}", "rightValue": "application/vnd.ms-excel", "operator": { "type": "string", "operation": "equals" } },
              { "leftValue": "={{ $('Extract User Data').first().json.document?.file_name }}", "rightValue": ".csv", "operator": { "type": "string", "operation": "endsWith" } }
            ], "combinator": "or" } },
            { "outputKey": "XLSX", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [
              { "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}", "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "operator": { "type": "string", "operation": "equals" } },
              { "leftValue": "={{ $('Extract User Data').first().json.document?.file_name }}", "rightValue": ".xlsx", "operator": { "type": "string", "operation": "endsWith" } }
            ], "combinator": "or" } },
            { "outputKey": "Menu", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "menu:", "operator": { "type": "string", "operation": "startsWith" } }], "combinator": "and" } },
            { "outputKey": "DateSelection", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "date:", "operator": { "type": "string", "operation": "startsWith" } }], "combinator": "and" } },
            { "outputKey": "DatesDone", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "dates:done", "operator": { "type": "string", "operation": "equals" } }], "combinator": "and" } },
            { "outputKey": "DatesReset", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "dates:reset", "operator": { "type": "string", "operation": "equals" } }], "combinator": "and" } }
          ]
        },
        "options": { "fallbackOutput": "none" }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [1860, 100],
      "id": "a7b8c9d0-7890-1234-f012-345678901234",
      "name": "Route Message"
    },

    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').first().json.chat_id;\nconst isAdmin = $('Check Admin').first().json.value === '1';\nconst keyboard = { inline_keyboard: [ [{text:'üì¶ –ó–∞–∫–∞–∑—ã',callback_data:'menu:orders'}], [{text:'üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã',callback_data:'menu:clusters'}] ] };\nif (isAdmin) keyboard.inline_keyboard.push([{text:'‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞',callback_data:'menu:admin'}]);\nreturn [{ json: { chat_id: chatId, text: 'ü§ñ <b>Ozon Analytics Bot</b>\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup: keyboard } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 40],
      "id": "b8c9d0e1-8901-2345-0123-456789012345",
      "name": "Generate Main Menu"
    },

    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').first().json.chat_id;\nconst callbackData = $('Extract User Data').first().json.callback_data;\nconst isAdmin = $('Check Admin').first().json.value === '1';\nconst action = callbackData.replace('menu:', '');\nlet text = '';\nlet keyboard = { inline_keyboard: [[{text:'¬´ –ù–∞–∑–∞–¥',callback_data:'/start'}]] };\nif (action === 'orders') { text = 'üì¶ <b>–†–∞–∑–¥–µ–ª: –ó–∞–∫–∞–∑—ã</b>\\n\\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º Ozon (FBO –∏–ª–∏ FBS) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\\n\\n<b>–§–æ—Ä–º–∞—Ç:</b> –¥–æ 20MB, .csv –∏–ª–∏ .xlsx'; }\nelse if (action === 'clusters') { text = 'üéØ <b>–†–∞–∑–¥–µ–ª: –ö–ª–∞—Å—Ç–µ—Ä—ã</b>\\n\\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'; }\nelse if (action === 'admin' && isAdmin) { text = '‚öôÔ∏è <b>–ê–¥–º–∏–Ω–∫–∞</b>\\n\\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:'; keyboard = { inline_keyboard: [[{text:'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',callback_data:'admin:users'}],[{text:'¬´ –ù–∞–∑–∞–¥',callback_data:'/start'}]] }; }\nreturn [{ json: { chat_id: chatId, text, reply_markup: keyboard } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 160],
      "id": "d0e1f2a3-0123-4567-2345-678901234567",
      "name": "Handle Menu"
    },

    {
      "parameters": {
        "jsCode": "const doc = $('Extract User Data').first().json.document || {};\nconst name = (doc.file_name || '').toLowerCase();\nconst mime = (doc.mime_type || '').toLowerCase();\nconst isCsv = mime==='text/csv' || mime==='application/vnd.ms-excel' || name.endsWith('.csv');\nif (!doc.file_id || !isCsv) return [];\nreturn [{ json: $json }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 240],
      "id": "ensure-document",
      "name": "Ensure Document"
    },

    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Extract User Data').first().json.document.file_id }}",
        "additionalFields": { "download": true }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2300, 240],
      "id": "get-file-telegram-node",
      "name": "Get File from Telegram",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },

    {
      "parameters": {
        "operation": "csv",
        "options": { "delimiter": ";", "relaxQuotes": true }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [2520, 240],
      "id": "extract-from-file-001",
      "name": "Extract from File"
    },

    {
      "parameters": {
        "jsCode": "function parseAsMsk(dateStr){ if(!dateStr) return null; let d=dateStr; if(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(d)){ d=d.replace(' ','T')+'Z'; } const base=new Date(d); if(isNaN(base)) return null; return new Date(base.getTime()+3*60*60*1000); }\nconst rawItems=$input.all().map(i=>i.json.row??i.json).filter(Boolean);\nif(rawItems.length===0){ throw new Error('Extract from File –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏'); }\nconst RE_BOM=/^\\uFEFF/; const RE_QUOTES_AROUND=/^\"+|\"+$/g; const RE_NBSP=/\\u00A0/g; const RE_MULTI_SPACE=/\\s+/g;\nfunction cleanKey(k){ if(k==null) return ''; return String(k).replace(RE_BOM,'').replace(RE_NBSP,' ').replace(RE_QUOTES_AROUND,'').trim().replace(RE_MULTI_SPACE,' '); }\nfunction cleanVal(v){ if(v==null) return ''; return String(v).replace(RE_BOM,'').trim(); }\nfunction toNumberLoose(v,f=0){ if(v==null) return f; const s=String(v).replace(/\\s/g,'').replace(',','.'); const n=Number(s); return Number.isFinite(n)?n:f; }\nfunction normalizeRow(row){ const out={}; for(const k of Object.keys(row)){ const ck=cleanKey(k); out[ck]=cleanVal(row[k]); } return out; }\nconst rows=rawItems.map(normalizeRow);\nconst allKeys=new Set(); rows.slice(0,5).forEach(r=>Object.keys(r).forEach(k=>allKeys.add(k))); const keysLower=Array.from(allKeys).map(k=>k.toLowerCase());\nfunction detectReportType(keys){ const has=f=>keys.some(k=>k.includes(f)); const isFBS=has('—Å–ø–æ—Å–æ–± –æ—Ç–≥—Ä—É–∑–∫–∏')||has('–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫')||has('–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞')||has('–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏'); const isFBO=has('—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ')||has('–æ—Ü–µ–Ω–∫–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')||has('–ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É')||has('–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'); if(isFBS&&!isFBO) return 'FBS'; if(isFBO&&!isFBS) return 'FBO'; if(has('–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')||has('‚Ññ –∑–∞–∫–∞–∑–∞')) return 'FBO'; return 'FBO'; }\nconst reportType=detectReportType(keysLower);\nfunction pick(record,candidates,fallback=''){ for(const name of candidates){ const c=cleanKey(name); if(record[c]!==undefined && String(record[c]).trim()!==''){ return record[c]; } } const recKeys=Object.keys(record); for(const name of candidates){ const cLower=cleanKey(name).toLowerCase(); const found=recKeys.find(k=>k.toLowerCase()===cLower); if(found && String(record[found]).trim()!==''){ return record[found]; } } return fallback; }\nconst records=[]; for(const r of rows){ let order_id,sku,quantity,price,created_at,status; if(reportType==='FBO'){ order_id=pick(r,['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']); sku=pick(r,['–ê—Ä—Ç–∏–∫—É–ª','OZON id','OZON ID']); quantity=toNumberLoose(pick(r,['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],1),1); price=toNumberLoose(pick(r,['–í–∞—à–∞ —Ü–µ–Ω–∞','–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],0),0); created_at=pick(r,['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É']); status=pick(r,['–°—Ç–∞—Ç—É—Å'],''); } else { order_id=pick(r,['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞','‚Ññ –∑–∞–∫–∞–∑–∞']); sku=pick(r,['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞','–ê—Ä—Ç–∏–∫—É–ª','OZON id','OZON ID']); quantity=toNumberLoose(pick(r,['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–ö–æ–ª-–≤–æ'],1),1); price=toNumberLoose(pick(r,['–í–∞—à–∞ —Ü–µ–Ω–∞','–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],0),0); created_at=pick(r,['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏']); status=pick(r,['–°—Ç–∞—Ç—É—Å'],''); } if(!order_id||!sku) continue; records.push({ order_id:cleanVal(order_id), sku:cleanVal(sku), quantity, price, created_at:cleanVal(created_at), status:String(status||'').toLowerCase() }); }\nconst dates=new Set(); for(const rec of records){ const m=parseAsMsk(rec.created_at); if(!m) continue; dates.add(m.toISOString().split('T')[0]); }\nconst availableDates=Array.from(dates).sort(); const chatId=$('Extract User Data').first().json.chat_id; const userId=$('Extract User Data').first().json.user_id;\nreturn [{ json:{ reportType, records, availableDates, totalRecords: records.length, chat_id: chatId, user_id: userId } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2740, 240],
      "id": "parse-csv-node",
      "name": "Parse Report File"
    },

    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:cache:{{ $json.user_id }}:csv_data",
        "value": "={{ JSON.stringify({ reportType: $json.reportType, records: $json.records, availableDates: $json.availableDates, totalRecords: $json.totalRecords }) }}",
        "options": { "ttl": 3600 }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2960, 240],
      "id": "cache-to-redis",
      "name": "Cache to Redis",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },

    {
      "parameters": {
        "jsCode": "const parsedData=$input.first().json; const availableDates=parsedData.availableDates;\nif(availableDates.length===0){ return [{ json:{ chat_id:parsedData.chat_id, text:'‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã', reply_markup:null } }]; }\nconst keyboard={ inline_keyboard: availableDates.map(date=>[{ text:date, callback_data:`date:${date}` }]) };\nreturn [{ json:{ chat_id: parsedData.chat_id, text:`üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\\n\\n–¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${parsedData.reportType}\\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${parsedData.totalRecords}`, reply_markup: keyboard } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3180, 240],
      "id": "date-keyboard-node",
      "name": "Generate Date Keyboard"
    },

    {
      "parameters": {
        "jsCode": "const input=$json; const inlineKeyboard=input.reply_markup?.inline_keyboard||[]; return [{ json:{ chat_id:input.chat_id, text:input.text, parse_mode:'HTML', reply_markup:{ inline_keyboard:inlineKeyboard } } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3400, 240],
      "id": "prepare-date-selection-msg",
      "name": "Prepare Date Selection"
    },

    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [3620, 240],
      "id": "send-date-selection-http",
      "name": "Send Date Selection"
    },

    {
      "parameters": {
        "jsCode": "const callbackData=$('Extract User Data').first().json.callback_data; const selectedDate=callbackData.replace('date:',''); const userId=$('Extract User Data').first().json.user_id;\nreturn [{ json:{ selectedDate, user_id:userId, chat_id:$('Extract User Data').first().json.chat_id, startTime:'00:00', endTime:'23:59' } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 520],
      "id": "handle-date-callback",
      "name": "Handle Date Callback"
    },

    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:cache:{{ $json.user_id }}:csv_data",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2300, 520],
      "id": "get-cached-data",
      "name": "Get Cached Data",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },

    {
      "parameters": {
        "jsCode": "// Address inputs by index with fallback for compatibility\nconst fromPort0=$input.all(0); const fromPort1=$input.all(1);\nconst sel=(fromPort0[0]?.json)||$input.first().json; const cachedRaw=(fromPort1[0]?.json?.value)??$input.last().json?.value;\nlet cachedData={}; try{ cachedData=cachedRaw?JSON.parse(cachedRaw):{}; }catch(e){ cachedData={}; }\nreturn [{ json:{ ...cachedData, selectedDates: sel.selectedDates, startTime: sel.startTime, endTime: sel.endTime, chat_id: sel.chat_id } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2520, 520],
      "id": "merge-selection-data",
      "name": "Merge Selection with Data"
    },

    {
      "parameters": {
        "jsCode": "function parseAsMsk(dateStr){ if(!dateStr) return null; let d=dateStr; if(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(d)){ d=d.replace(' ','T')+'Z'; } const base=new Date(d); if(isNaN(base)) return null; return new Date(base.getTime()+3*60*60*1000); }\nfunction filterRecordsByDateTime(records,datesOrOne,startTime,endTime){ const dates=Array.isArray(datesOrOne)?datesOrOne:[datesOrOne]; const set=new Set(dates.filter(Boolean)); return records.filter(record=>{ const mskDate=parseAsMsk(record.created_at); if(!mskDate) return false; const recordDateStr=mskDate.toISOString().split('T')[0]; if(!set.has(recordDateStr)) return false; const recordTimeStr=mskDate.toTimeString().split(' ')[0].substring(0,5); return recordTimeStr>=startTime && recordTimeStr<=endTime; }); }\nfunction calculateStatistics(records,datesOrOne,startTime,endTime){ const filteredRecords=filterRecordsByDateTime(records,datesOrOne,startTime,endTime); if(filteredRecords.length===0){ return { date:datesOrOne, startTime, endTime, totalOrders:0, totalCancellations:0, totalRevenue:0, skuStats:{}, message:'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥' }; }\n const statsBySku={}; const revenueStatuses=['–¥–æ—Å—Ç–∞–≤–ª–µ–Ω','–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è','–æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏','–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫–∏']; const cancelStatuses=['–æ—Ç–º–µ–Ω—ë–Ω','–æ—Ç–º–µ–Ω–µ–Ω','–≤–æ–∑–≤—Ä–∞—Ç'];\n filteredRecords.forEach(record=>{ const sku=record.sku; const status=record.status.toLowerCase(); const quantity=record.quantity||1; const price=record.price||0; if(!statsBySku[sku]){ statsBySku[sku]={ totalOrders:0, cancellations:0, totalRevenue:0, weightedPriceSum:0, weightedQuantitySum:0, avgPrice:0 }; }\n statsBySku[sku].totalOrders += quantity; if(cancelStatuses.some(s=>status.includes(s))){ statsBySku[sku].cancellations += quantity; } if(revenueStatuses.some(s=>status.includes(s))){ statsBySku[sku].totalRevenue += price*quantity; statsBySku[sku].weightedPriceSum += price*quantity; statsBySku[sku].weightedQuantitySum += quantity; } });\n Object.keys(statsBySku).forEach(sku=>{ const s=statsBySku[sku]; if(s.weightedQuantitySum>0){ s.avgPrice=s.weightedPriceSum/s.weightedQuantitySum; } });\n let totalOrders=0,totalCancellations=0,totalRevenue=0; Object.values(statsBySku).forEach(s=>{ totalOrders+=s.totalOrders; totalCancellations+=s.cancellations; totalRevenue+=s.totalRevenue; });\n return { date:datesOrOne, startTime, endTime, totalOrders, totalCancellations, totalRevenue, skuStats:statsBySku }; }\nfunction formatStatisticsMessage(stats){ let message=`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\\n\\n`; const datesLabel=Array.isArray(stats.date)?stats.date.join(', '):stats.date; message+=`üìÖ –î–∞—Ç—ã: ${datesLabel}\\n`; message+=`‚è∞ –í—Ä–µ–º—è: ${stats.startTime} - ${stats.endTime}\\n\\n`; if(stats.totalOrders===0){ message+=stats.message||'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; return message; } const sortedSkus=Object.keys(stats.skuStats).sort(); sortedSkus.forEach(sku=>{ const s=stats.skuStats[sku]; message+=`<b>${sku}</b>\\n`; message+=`  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${s.totalOrders}\\n`; message+=`  ‚Ä¢ –û—Ç–º–µ–Ω: ${s.cancellations}\\n`; message+=`  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${s.avgPrice.toFixed(2)} ‚ÇΩ\\n`; message+=`  ‚Ä¢ –°—É–º–º–∞: ${s.totalRevenue.toFixed(2)} ‚ÇΩ\\n\\n`; }); message+=`<b>–ò–¢–û–ì–û:</b>\\n`; message+=`  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\\n`; message+=`  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω: ${stats.totalCancellations}\\n`; message+=`  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${stats.totalRevenue.toFixed(2)} ‚ÇΩ\\n`; return message; }\nconst parsedData=$input.first().json; const datesOrOne=($json.selectedDates && $json.selectedDates.length)?$json.selectedDates:($json.selectedDate||parsedData.availableDates[0]); const startTime=$json.startTime||'00:00'; const endTime=$json.endTime||'23:59'; const stats=calculateStatistics(parsedData.records,datesOrOne,startTime,endTime); const message=formatStatisticsMessage(stats);\nreturn [{ json:{ chat_id:parsedData.chat_id, text:message, stats, parsed_data:parsedData } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2740, 520],
      "id": "calc-stats-node",
      "name": "Calculate Statistics"
    },

    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": { "parse_mode": "HTML", "appendAttribution": false }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2960, 520],
      "id": "send-statistics",
      "name": "Send Statistics",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },

    {
      "parameters": {
        "jsCode": "const input=$json; const inlineKeyboard=input.reply_markup?.inline_keyboard||[]; return [{ json:{ chat_id:input.chat_id, text:input.text, parse_mode:'HTML', reply_markup:{ inline_keyboard:inlineKeyboard } } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2300, 40],
      "id": "prepare-menu-msg",
      "name": "Prepare Menu"
    },

    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2520, 40],
      "id": "send-menu-http",
      "name": "Send Menu"
    },

    {
      "parameters": {
        "jsCode": "const input=$json; const inlineKeyboard=input.reply_markup?.inline_keyboard||[]; return [{ json:{ chat_id:input.chat_id, text:input.text, parse_mode:'HTML', reply_markup:{ inline_keyboard:inlineKeyboard } } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2300, 160],
      "id": "prepare-menu-response-msg",
      "name": "Prepare Menu Response"
    },

    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2520, 160],
      "id": "send-menu-response-http",
      "name": "Send Menu Response"
    },

    {
      "parameters": {
        "jsCode": "const doc=$('Extract User Data').first().json.document || {}; const name=(doc.file_name||'').toLowerCase(); const mime=(doc.mime_type||'').toLowerCase(); const isXlsx = mime==='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || name.endsWith('.xlsx'); if(!doc.file_id || !isXlsx) return []; return [{ json:$json }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 300],
      "id": "ensure-document-xlsx",
      "name": "Ensure XLSX Document"
    },

    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Extract User Data').first().json.document.file_id }}",
        "additionalFields": { "download": true }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2300, 300],
      "id": "get-file-telegram-xlsx",
      "name": "Get XLSX from Telegram",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },

    {
      "parameters": { "operation": "xlsx" },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [2520, 300],
      "id": "extract-from-file-xlsx",
      "name": "Extract from File (XLSX)"
    },

    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:cache:{{ $('Extract User Data').first().json.user_id }}:selected_dates",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1860, 520],
      "id": "get-selected-dates",
      "name": "Get Selected Dates",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },

    {
      "parameters": {
        "jsCode": "const dateStr=$('Extract User Data').first().json.callback_data.replace('date:',''); const userId=$('Extract User Data').first().json.user_id; let selected=[]; try{ const raw=$('Get Selected Dates').first().json.value; selected=raw?JSON.parse(raw):[]; }catch(e){ selected=[]; }\nconst MAX=3; if(selected.includes(dateStr)){ selected=selected.filter(d=>d!==dateStr); return [{ json:{ user_id:userId, selectedDates:selected, hitLimit:false } }]; }\nif(selected.length>=MAX){ return [{ json:{ user_id:userId, selectedDates:selected, hitLimit:true } }]; }\nselected.push(dateStr); return [{ json:{ user_id:userId, selectedDates:selected, hitLimit:false } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 620],
      "id": "toggle-date",
      "name": "Toggle Date"
    },

    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:cache:{{ $json.user_id }}:selected_dates",
        "value": "={{ JSON.stringify($json.selectedDates || []) }}",
        "options": { "ttl": 3600 }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2300, 620],
      "id": "persist-selected-dates",
      "name": "Persist Selected Dates",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },

    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:cache:{{ $json.user_id }}:csv_data",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2520, 620],
      "id": "fetch-csv-meta",
      "name": "Fetch Cached CSV Meta",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },

    {
      "parameters": {
        "jsCode": "const chatId=$('Extract User Data').first().json.chat_id; let available=[]; try{ const raw=$('Fetch Cached CSV Meta').first().json.value; const obj=raw?JSON.parse(raw):{}; available=Array.isArray(obj.availableDates)?obj.availableDates:[]; }catch(e){ available=[]; }\nconst selected=$json.selectedDates||[]; const selectedLine=selected.length?`–í—ã–±—Ä–∞–Ω–æ: ${selected.join(', ')}`:'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 –¥–∞—Ç:';\nconst rows=available.map(d=>([{ text:(selected.includes(d)?'‚òë ':'‚ñ´ ')+d, callback_data:`date:${d}` }]));\nconst controls=[]; if(selected.length>0){ controls.push({ text:'‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data:'dates:done' }); } else { controls.push({ text:'üîí –ì–æ—Ç–æ–≤–æ', callback_data:'noop' }); } controls.push({ text:'üóë –°–±—Ä–æ—Å', callback_data:'dates:reset' });\nconst keyboard={ inline_keyboard:[...rows, controls] };\nreturn [{ json:{ chat_id:chatId, text:`üìÖ –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –¥–∞—Ç\\n\\n${selectedLine}`, reply_markup: keyboard } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2740, 620],
      "id": "render-multi-date-kb",
      "name": "Render Multi-Date Keyboard"
    },

    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2960, 620],
      "id": "send-multi-date-kb",
      "name": "Send Multi-Date Keyboard"
    },

    {
      "parameters": {
        "jsCode": "return [{ json:{ selectedDates:[], user_id:$('Extract User Data').first().json.user_id } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 720],
      "id": "reset-dates",
      "name": "Reset Dates"
    },

    {
      "parameters": {
        "jsCode": "const userId=$('Extract User Data').first().json.user_id; let selected=[]; try{ const raw=$('Get Selected Dates').first().json.value; selected=raw?JSON.parse(raw):[]; }catch(e){ selected=[]; }\nif(!selected.length){ return [{ json:{ needSelect:true } }]; }\nreturn [{ json:{ selectedDates:selected, user_id:userId, chat_id:$('Extract User Data').first().json.chat_id, startTime:'00:00', endTime:'23:59' } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 820],
      "id": "handle-dates-done",
      "name": "Handle Done"
    },

    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –¥–∞—Ç\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2300, 720],
      "id": "answer-callback-limit",
      "name": "Answer Callback (limit)"
    },

    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2300, 820],
      "id": "answer-callback-need-select",
      "name": "Answer Callback (needSelect)"
    }
  ],
  "connections": {
    "Telegram Trigger": { "main": [[{ "node": "Config", "type": "main", "index": 0 }]] },
    "Config": { "main": [[{ "node": "Validate Config", "type": "main", "index": 0 }]] },
    "Validate Config": { "main": [[{ "node": "Extract User Data", "type": "main", "index": 0 }]] },
    "Extract User Data": { "main": [[{ "node": "Check Whitelist", "type": "main", "index": 0 }]] },
    "Check Whitelist": { "main": [[{ "node": "Validate Whitelist", "type": "main", "index": 0 }]] },
    "Validate Whitelist": { "main": [[{ "node": "Is Authorized?", "type": "main", "index": 0 }]] },
    "Is Authorized?": {
      "main": [
        [{ "node": "Check Admin", "type": "main", "index": 0 }],
        [{ "node": "Unauthorized Response", "type": "main", "index": 0 }]
      ]
    },
    "Check Admin": { "main": [[{ "node": "Route Message", "type": "main", "index": 0 }]] },

    "Route Message": {
      "main": [
        [{ "node": "Generate Main Menu", "type": "main", "index": 0 }],
        [{ "node": "Ensure Document", "type": "main", "index": 0 }],
        [{ "node": "Handle Menu", "type": "main", "index": 0 }],
        [{ "node": "Get Selected Dates", "type": "main", "index": 0 }],
        [{ "node": "Ensure XLSX Document", "type": "main", "index": 0 }],
        [{ "node": "handle-dates-done", "type": "main", "index": 0 }],
        [{ "node": "Reset Dates", "type": "main", "index": 0 }]
      ]
    },

    "Generate Main Menu": { "main": [[{ "node": "Prepare Menu", "type": "main", "index": 0 }]] },
    "Prepare Menu": { "main": [[{ "node": "Send Menu", "type": "main", "index": 0 }]] },

    "Handle Menu": { "main": [[{ "node": "Prepare Menu Response", "type": "main", "index": 0 }]] },
    "Prepare Menu Response": { "main": [[{ "node": "Send Menu Response", "type": "main", "index": 0 }]] },

    "Ensure Document": { "main": [[{ "node": "Get File from Telegram", "type": "main", "index": 0 }]] },
    "Get File from Telegram": { "main": [[{ "node": "Extract from File", "type": "main", "index": 0 }]] },
    "Extract from File": { "main": [[{ "node": "Parse Report File", "type": "main", "index": 0 }]] },
    "Parse Report File": { "main": [[{ "node": "Cache to Redis", "type": "main", "index": 0 }]] },
    "Cache to Redis": { "main": [[{ "node": "Generate Date Keyboard", "type": "main", "index": 0 }]] },
    "Generate Date Keyboard": { "main": [[{ "node": "Prepare Date Selection", "type": "main", "index": 0 }]] },
    "Prepare Date Selection": { "main": [[{ "node": "Send Date Selection", "type": "main", "index": 0 }]] },

    "Ensure XLSX Document": { "main": [[{ "node": "Get XLSX from Telegram", "type": "main", "index": 0 }]] },
    "Get XLSX from Telegram": { "main": [[{ "node": "Extract from File (XLSX)", "type": "main", "index": 0 }]] },
    "Extract from File (XLSX)": { "main": [[{ "node": "Parse Report File", "type": "main", "index": 0 }]] },

    "Get Selected Dates": { "main": [[{ "node": "Toggle Date", "type": "main", "index": 0 }]] },
    "Toggle Date": { "main": [[{ "node": "Persist Selected Dates", "type": "main", "index": 0 }]] },
    "Persist Selected Dates": { "main": [[{ "node": "Fetch Cached CSV Meta", "type": "main", "index": 0 }]] },
    "Fetch Cached CSV Meta": { "main": [[{ "node": "Render Multi-Date Keyboard", "type": "main", "index": 0 }]] },
    "Render Multi-Date Keyboard": { "main": [[{ "node": "Send Multi-Date Keyboard", "type": "main", "index": 0 }]] },

    "Reset Dates": { "main": [[{ "node": "Persist Selected Dates", "type": "main", "index": 0 }]] },

    "Handle Date Callback": { "main": [[{ "node": "Get Cached Data", "type": "main", "index": 0 }]] },
    "Get Cached Data": { "main": [[{ "node": "Merge Selection with Data", "type": "main", "index": 0 }]] },
    "Merge Selection with Data": { "main": [[{ "node": "Calculate Statistics", "type": "main", "index": 0 }]] },
    "Calculate Statistics": { "main": [[{ "node": "Send Statistics", "type": "main", "index": 0 }]] },

    "handle-dates-done": { "main": [[{ "node": "Get Cached Data", "type": "main", "index": 0 }]] }
  },
  "pinData": {},
  "active": false,
  "settings": { "executionOrder": "v1" },
  "versionId": "1-patched-layout-aligned",
  "meta": { "instanceId": "ozon-bot-instance" },
  "tags": []
}
