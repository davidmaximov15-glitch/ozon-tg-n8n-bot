{
  "name": "Ozon Telegram Bot - Orders Analytics (patched)",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query"
        ],
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        300
      ],
      "id": "a1b2c3d4-1234-5678-9abc-def012345678",
      "name": "Telegram Trigger",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "telegram-bot-token-field",
              "name": "TELEGRAM_BOT_TOKEN",
              "value": "YOUR_TELEGRAM_BOT_TOKEN_HERE",
              "type": "string"
            },
            {
              "id": "superuser-ids-field",
              "name": "SUPERUSER_IDS",
              "value": "user_id_1,user_id_2",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        300
      ],
      "id": "config-set-node-001",
      "name": "Config"
    },
    {
      "parameters": {
        "jsCode": "// üîê –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò\n\nconst token = $json.TELEGRAM_BOT_TOKEN;\nconst superusers = $json.SUPERUSER_IDS;\n\n// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞\nif (!token || token === 'YOUR_TELEGRAM_BOT_TOKEN_HERE') {\n  throw new Error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Config node');\n}\n\n// –ü—Ä–æ–≤–µ—Ä–∫–∞ superusers\nif (!superusers || superusers.trim() === '' || superusers === 'user_id_1,user_id_2') {\n  throw new Error('‚ùå SUPERUSER_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Config node (–∑–∞–º–µ–Ω–∏ user_id_1,user_id_2 –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)');\n}\n\n// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–ª—å—à–µ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ–ª—è–º–∏)\nreturn {\n  json: $json,\n  binary: $binary\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        300
      ],
      "id": "validate-config-node-001",
      "name": "Validate Config"
    },
    {
      "parameters": {
        "jsCode": "// Extract user data from Telegram Trigger\nconst telegramData = $('Telegram Trigger').first().json;\nconst message = telegramData.message;\nconst callback = telegramData.callback_query;\n\nconst userId = message?.from?.id || callback?.from?.id;\nconst chatId = message?.chat?.id || callback?.message?.chat?.id;\nconst messageText = message?.text || '';\nconst callbackData = callback?.data || '';\nconst document = message?.document || null;\n\n// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–º —á—Ç–æ –ø—Ä–∏—à–ª–æ (Config –¥–∞–Ω–Ω—ã–µ –æ—Ç Validate Config)\nreturn {\n  json: {\n    ...$json,  // Config –¥–∞–Ω–Ω—ã–µ (TELEGRAM_BOT_TOKEN, SUPERUSER_IDS)\n    user_id: String(userId),\n    chat_id: String(chatId),\n    message_text: messageText,\n    callback_data: callbackData,\n    document: document\n  },\n  binary: $binary\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        300
      ],
      "id": "b2c3d4e5-2345-6789-abcd-ef0123456789",
      "name": "Extract User Data"
    },
    {
      "parameters": {
        "operation": "csv",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1780,
        420
      ],
      "id": "extract-from-file-001",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:whitelist:{{ $json.user_id }}",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        680,
        300
      ],
      "id": "c3d4e5f6-3456-7890-bcde-f01234567890",
      "name": "Check Whitelist",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "is-superuser-or-admin",
              "leftValue": "={{ $json.is_superuser === true || $json.is_admin === true }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        900,
        300
      ],
      "id": "d4e5f6a7-4567-8901-cdef-012345678901",
      "name": "Is Authorized?"
    },
    {
      "parameters": {
        "chatId": "={{ $('Extract User Data').first().json.chat_id }}",
        "text": "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1120,
        460
      ],
      "id": "e5f6a7b8-5678-9012-def0-123456789012",
      "name": "Unauthorized Response",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:admins:{{ $('Extract User Data').first().json.user_id }}",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1120,
        140
      ],
      "id": "f6a7b8c9-6789-0123-ef01-234567890123",
      "name": "Check Admin",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-start",
                    "leftValue": "={{ $('Extract User Data').first().json.message_text }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-csv-mime1",
                    "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}",
                    "rightValue": "text/csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "id": "cond-csv-mime2",
                    "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}",
                    "rightValue": "application/vnd.ms-excel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "id": "cond-csv-ext",
                    "leftValue": "={{ $('Extract User Data').first().json.document?.file_name }}",
                    "rightValue": ".csv",
                    "operator": {
                      "type": "string",
                      "operation": "endsWith"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "CSV"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-menu",
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "menu:",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Menu"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-date",
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "date:",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DateSelection"
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1340,
        140
      ],
      "id": "a7b8c9d0-7890-1234-f012-345678901234",
      "name": "Route Message"
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').first().json.chat_id;\nconst isAdmin = $('Check Admin').first().json.value === '1';\n\nconst keyboard = {\n  inline_keyboard: [\n    [{text: 'üì¶ –ó–∞–∫–∞–∑—ã', callback_data: 'menu:orders'}],\n    [{text: 'üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã', callback_data: 'menu:clusters'}]\n  ]\n};\n\nif (isAdmin) {\n  keyboard.inline_keyboard.push([{text: '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞', callback_data: 'menu:admin'}]);\n}\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    text: 'ü§ñ **Ozon Analytics Bot**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',\n    reply_markup: keyboard\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        60
      ],
      "id": "b8c9d0e1-8901-2345-0123-456789012345",
      "name": "Generate Main Menu"
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').first().json.chat_id;\nconst callbackData = $('Extract User Data').first().json.callback_data;\nconst isAdmin = $('Check Admin').first().json.value === '1';\n\nconst action = callbackData.replace('menu:', '');\n\nlet text = '';\nlet keyboard = {inline_keyboard: [[{text: '¬´ –ù–∞–∑–∞–¥', callback_data: '/start'}]]};\n\nif (action === 'orders') {\n  text = 'üì¶ **–†–∞–∑–¥–µ–ª: –ó–∞–∫–∞–∑—ã**\\n\\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º Ozon (FBO –∏–ª–∏ FBS) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\\n\\n*–§–æ—Ä–º–∞—Ç:* –¥–æ 20MB, .csv';\n} else if (action === 'clusters') {\n  text = 'üéØ **–†–∞–∑–¥–µ–ª: –ö–ª–∞—Å—Ç–µ—Ä—ã**\\n\\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.';\n} else if (action === 'admin' && isAdmin) {\n  text = '‚öôÔ∏è **–ê–¥–º–∏–Ω–∫–∞**\\n\\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:';\n  keyboard = {\n    inline_keyboard: [\n      [{text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:users'}],\n      [{text: '¬´ –ù–∞–∑–∞–¥', callback_data: '/start'}]\n    ]\n  };\n}\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    text: text,\n    reply_markup: keyboard\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        240
      ],
      "id": "d0e1f2a3-0123-4567-2345-678901234567",
      "name": "Handle Menu"
    },
    {
      "parameters": {
        "jsCode": "// === –ß–¢–ï–ù–ò–ï –ü–û–°–õ–ï Extract from File ===\nconst rows = $input.all().map(i => i.json.row ?? i.json).filter(Boolean);\nif (rows.length === 0) {\n  throw new Error('Extract from File –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');\n}\n\nconst keysLower = Object.keys(rows[0]).map(k => k.toLowerCase());\nfunction detectReportType(keys) {\n  const isFBS = keys.some(k => k.includes('—Å–ø–æ—Å–æ–± –æ—Ç–≥—Ä—É–∑–∫–∏') || k.includes('–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫') || k.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞') || k.includes('–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏'));\n  const isFBO = keys.some(k => k.includes('—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ') || k.includes('–æ—Ü–µ–Ω–∫–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'));\n  if (isFBS) return 'FBS';\n  if (isFBO) return 'FBO';\n  return 'UNKNOWN';\n}\nconst reportType = detectReportType(keysLower);\nif (reportType === 'UNKNOWN') {\n  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º');\n}\n\nfunction pick(obj, names, fallback = '') {\n  for (const n of names) {\n    if (obj[n] !== undefined && String(obj[n]).trim() !== '') return obj[n];\n  }\n  return fallback;\n}\n\nconst records = [];\nfor (const r of rows) {\n  let order_id, sku, quantity, price, created_at, status;\n  if (reportType === 'FBO') {\n    order_id   = pick(r, ['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']);\n    sku        = pick(r, ['–ê—Ä—Ç–∏–∫—É–ª', 'OZON id']);\n    quantity   = Number(pick(r, ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 1));\n    price      = Number(pick(r, ['–í–∞—à–∞ —Ü–µ–Ω–∞', '–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'], 0));\n    created_at = pick(r, ['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É']);\n    status     = pick(r, ['–°—Ç–∞—Ç—É—Å'], '');\n  } else {\n    order_id   = pick(r, ['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞','‚Ññ –∑–∞–∫–∞–∑–∞']);\n    sku        = pick(r, ['–ê—Ä—Ç–∏–∫—É–ª','–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞','OZON id']);\n    quantity   = Number(pick(r, ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–ö–æ–ª-–≤–æ'], 1));\n    price      = Number(pick(r, ['–í–∞—à–∞ —Ü–µ–Ω–∞','–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'], 0));\n    created_at = pick(r, ['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏']);\n    status     = pick(r, ['–°—Ç–∞—Ç—É—Å'], '');\n  }\n  if (!order_id || !sku) continue;\n  records.push({\n    order_id,\n    sku,\n    quantity: Number.isFinite(quantity) ? quantity : 1,\n    price: Number.isFinite(price) ? price : 0,\n    created_at,\n    status: String(status || '').toLowerCase(),\n  });\n}\n\nconst dates = new Set();\nfor (const rec of records) {\n  if (!rec.created_at) continue;\n  const d = new Date(rec.created_at);\n  if (isNaN(d)) continue;\n  const msk = new Date(d.getTime() + 3 * 60 * 60 * 1000);\n  dates.add(msk.toISOString().split('T')[0]);\n}\n\nconst availableDates = Array.from(dates).sort();\nconst chatId = $('Extract User Data').first().json.chat_id;\nconst userId = $('Extract User Data').first().json.user_id;\n\nreturn [{\n  json: {\n    reportType,\n    records,\n    availableDates,\n    totalRecords: records.length,\n    chat_id: chatId,\n    user_id: userId\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2220,
        420
      ],
      "id": "parse-csv-node",
      "name": "Parse CSV"
    },
    {
      "parameters": {
        "jsCode": "const parsedData = $input.first().json;\nconst availableDates = parsedData.availableDates;\n\nif (availableDates.length === 0) {\n  return [{\n    json: {\n      chat_id: parsedData.chat_id,\n      text: '‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã',\n      reply_markup: null\n    }\n  }];\n}\n\nconst keyboard = {\n  inline_keyboard: availableDates.slice(0, 10).map(date => [{\n    text: date,\n    callback_data: `date:${date}`\n  }])\n};\n\nreturn [{\n  json: {\n    chat_id: parsedData.chat_id,\n    text: `üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n–¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${parsedData.reportType}\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${parsedData.totalRecords}`,\n    reply_markup: keyboard\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        420
      ],
      "id": "date-keyboard-node",
      "name": "Generate Date Keyboard"
    },
    {
      "parameters": {
        "jsCode": "function filterRecordsByDateTime(records, date, startTime, endTime) {\n  return records.filter(record => {\n    try {\n      const recordDate = new Date(record.created_at);\n      const mskDate = new Date(recordDate.getTime() + 3 * 60 * 60 * 1000);\n      const recordDateStr = mskDate.toISOString().split('T')[0];\n      const recordTimeStr = mskDate.toTimeString().split(' ')[0].substring(0, 5);\n      \n      return recordDateStr === date && recordTimeStr >= startTime && recordTimeStr <= endTime;\n    } catch (e) {\n      return false;\n    }\n  });\n}\n\nfunction calculateStatistics(records, date, startTime, endTime) {\n  const filteredRecords = filterRecordsByDateTime(records, date, startTime, endTime);\n  \n  if (filteredRecords.length === 0) {\n    return {\n      date, startTime, endTime,\n      totalOrders: 0,\n      totalCancellations: 0,\n      totalRevenue: 0,\n      skuStats: {},\n      message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'\n    };\n  }\n\n  const statsBySku = {};\n  const revenueStatuses = ['–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', '–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', '–æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏', '–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫–∏'];\n  const cancelStatuses = ['–æ—Ç–º–µ–Ω—ë–Ω', '–æ—Ç–º–µ–Ω–µ–Ω', '–≤–æ–∑–≤—Ä–∞—Ç'];\n\n  filteredRecords.forEach(record => {\n    const sku = record.sku;\n    const status = record.status.toLowerCase();\n    const quantity = record.quantity || 1;\n    const price = record.price || 0;\n    \n    if (!statsBySku[sku]) {\n      statsBySku[sku] = {\n        totalOrders: 0,\n        cancellations: 0,\n        totalRevenue: 0,\n        weightedPriceSum: 0,\n        weightedQuantitySum: 0,\n        avgPrice: 0\n      };\n    }\n    \n    statsBySku[sku].totalOrders += quantity;\n    \n    if (cancelStatuses.some(s => status.includes(s))) {\n      statsBySku[sku].cancellations += quantity;\n    }\n    \n    if (revenueStatuses.some(s => status.includes(s))) {\n      statsBySku[sku].totalRevenue += price * quantity;\n      statsBySku[sku].weightedPriceSum += price * quantity;\n      statsBySku[sku].weightedQuantitySum += quantity;\n    }\n  });\n\n  Object.keys(statsBySku).forEach(sku => {\n    const stats = statsBySku[sku];\n    if (stats.weightedQuantitySum > 0) {\n      stats.avgPrice = stats.weightedPriceSum / stats.weightedQuantitySum;\n    }\n  });\n\n  let totalOrders = 0, totalCancellations = 0, totalRevenue = 0;\n  Object.values(statsBySku).forEach(stats => {\n    totalOrders += stats.totalOrders;\n    totalCancellations += stats.cancellations;\n    totalRevenue += stats.totalRevenue;\n  });\n\n  return { date, startTime, endTime, totalOrders, totalCancellations, totalRevenue, skuStats: statsBySku };\n}\n\nfunction formatStatisticsMessage(stats) {\n  let message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤**\\n\\n`;\n  message += `üìÖ –î–∞—Ç–∞: ${stats.date}\\n`;\n  message += `‚è∞ –í—Ä–µ–º—è: ${stats.startTime} - ${stats.endTime}\\n\\n`;\n\n  if (stats.totalOrders === 0) {\n    message += stats.message || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';\n    return message;\n  }\n\n  const sortedSkus = Object.keys(stats.skuStats).sort();\n  sortedSkus.forEach(sku => {\n    const skuStats = stats.skuStats[sku];\n    message += `**${sku}**\\n`;\n    message += `  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${skuStats.totalOrders}\\n`;\n    message += `  ‚Ä¢ –û—Ç–º–µ–Ω: ${skuStats.cancellations}\\n`;\n    message += `  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${skuStats.avgPrice.toFixed(2)} ‚ÇΩ\\n`;\n    message += `  ‚Ä¢ –°—É–º–º–∞: ${skuStats.totalRevenue.toFixed(2)} ‚ÇΩ\\n\\n`;\n  });\n\n  message += `**–ò–¢–û–ì–û:**\\n`;\n  message += `  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\\n`;\n  message += `  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω: ${stats.totalCancellations}\\n`;\n  message += `  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${stats.totalRevenue.toFixed(2)} ‚ÇΩ\\n`;\n\n  return message;\n}\n\n// Main execution\nconst parsedData = $input.first().json;\nconst date = $json.selectedDate || parsedData.availableDates[0];\nconst startTime = $json.startTime || '00:00';\nconst endTime = $json.endTime || '23:59';\n\nconst stats = calculateStatistics(parsedData.records, date, startTime, endTime);\nconst message = formatStatisticsMessage(stats);\n\nreturn [{\n  json: {\n    chat_id: parsedData.chat_id,\n    text: message,\n    stats: stats,\n    parsed_data: parsedData\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        600
      ],
      "id": "calc-stats-node",
      "name": "Calculate Statistics"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2660,
        600
      ],
      "id": "send-statistics",
      "name": "Send Statistics",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:cache:{{ $json.user_id }}:csv_data",
        "value": "={{ JSON.stringify($json) }}",
        "options": {
          "ttl": 3600
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2220,
        540
      ],
      "id": "cache-to-redis",
      "name": "Cache to Redis",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const callbackData = $('Extract User Data').first().json.callback_data;\nconst selectedDate = callbackData.replace('date:', '');\nconst userId = $('Extract User Data').first().json.user_id;\n\nreturn [{\n  json: {\n    selectedDate: selectedDate,\n    user_id: userId,\n    chat_id: $('Extract User Data').first().json.chat_id,\n    startTime: '00:00',\n    endTime: '23:59'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        600
      ],
      "id": "handle-date-callback",
      "name": "Handle Date Callback"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:cache:{{ $json.user_id }}:csv_data",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1780,
        600
      ],
      "id": "get-cached-data",
      "name": "Get Cached Data",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dateSelection = $input.first().json;\nconst cachedData = JSON.parse($input.last().json.value || '{}');\n\nreturn [{\n  json: {\n    ...cachedData,\n    selectedDate: dateSelection.selectedDate,\n    startTime: dateSelection.startTime,\n    endTime: dateSelection.endTime,\n    chat_id: dateSelection.chat_id\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        600
      ],
      "id": "merge-selection-data",
      "name": "Merge Selection with Data"
    },
    {
      "parameters": {
        "jsCode": "// üîê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê\n\nconst whitelistValue = $json.value;\nconst userId = $('Extract User Data').first().json.user_id;\nconst configSuperusers = $('Config').first().json.SUPERUSER_IDS || '';\n\nconst superuserIds = configSuperusers.split(',').map(id => id.trim()).filter(id => id);\n\nconst isSuperuser = superuserIds.includes(userId);\nconst isAdmin = whitelistValue === '1';\n\nif (!isSuperuser && !isAdmin) {\n  throw new Error('‚õî Access denied. Only superusers and admins can use this bot.');\n}\n\nreturn {\n  json: {\n    ...$('Extract User Data').first().json,\n    is_superuser: isSuperuser,\n    is_admin: isAdmin,\n    redis_value: whitelistValue\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        790,
        300
      ],
      "id": "validate-whitelist-code",
      "name": "Validate Whitelist"
    },
    {
      "parameters": {
        "jsCode": "const input = $json;\nconst inlineKeyboard = input.reply_markup?.inline_keyboard || [];\nreturn [{\n  json: {\n    chat_id: input.chat_id,\n    text: input.text,\n    reply_markup: { inline_keyboard: inlineKeyboard }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        60
      ],
      "id": "prepare-menu-msg",
      "name": "Prepare Menu"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        60
      ],
      "id": "send-menu-http",
      "name": "Send Menu"
    },
    {
      "parameters": {
        "jsCode": "const input = $json;\nconst inlineKeyboard = input.reply_markup?.inline_keyboard || [];\nreturn [{\n  json: {\n    chat_id: input.chat_id,\n    text: input.text,\n    reply_markup: { inline_keyboard: inlineKeyboard }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        240
      ],
      "id": "prepare-menu-response-msg",
      "name": "Prepare Menu Response"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        240
      ],
      "id": "send-menu-response-http",
      "name": "Send Menu Response"
    },
    {
      "parameters": {
        "jsCode": "const input = $json;\nconst inlineKeyboard = input.reply_markup?.inline_keyboard || [];\nreturn [{\n  json: {\n    chat_id: input.chat_id,\n    text: input.text,\n    reply_markup: { inline_keyboard: inlineKeyboard }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2220,
        240
      ],
      "id": "prepare-date-selection-msg",
      "name": "Prepare Date Selection"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2440,
        240
      ],
      "id": "send-date-selection-http",
      "name": "Send Date Selection"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Telegram Trigger').first().json.message.document.file_id }}",
        "additionalFields": { "download": true }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1200,
        500
      ],
      "id": "get-file-telegram-node",
      "name": "Get File from Telegram",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          { "node": "Config", "type": "main", "index": 0 }
        ]
      ]
    },
    "Extract User Data": {
      "main": [
        [
          { "node": "Check Whitelist", "type": "main", "index": 0 }
        ]
      ]
    },
    "Check Whitelist": {
      "main": [
        [
          { "node": "Validate Whitelist", "type": "main", "index": 0 }
        ]
      ]
    },
    "Is Authorized?": {
      "main": [
        [
          { "node": "Check Admin", "type": "main", "index": 0 }
        ],
        [
          { "node": "Unauthorized Response", "type": "main", "index": 0 }
        ]
      ]
    },
    "Check Admin": {
      "main": [
        [
          { "node": "Route Message", "type": "main", "index": 0 }
        ]
      ]
    },
    "Route Message": {
      "main": [
        [
          { "node": "Generate Main Menu", "type": "main", "index": 0 }
        ],
        [
          { "node": "Get File from Telegram", "type": "main", "index": 0 }
        ],
        [
          { "node": "Handle Menu", "type": "main", "index": 0 }
        ],
        [
          { "node": "Handle Date Callback", "type": "main", "index": 0 }
        ]
      ]
    },
    "Generate Main Menu": {
      "main": [
        [
          { "node": "Prepare Menu", "type": "main", "index": 0 }
        ]
      ]
    },
    "Handle Menu": {
      "main": [
        [
          { "node": "Prepare Menu Response", "type": "main", "index": 0 }
        ]
      ]
    },
    "Parse CSV": {
      "main": [
        [
          { "node": "Cache to Redis", "type": "main", "index": 0 }
        ]
      ]
    },
    "Generate Date Keyboard": {
      "main": [
        [
          { "node": "Prepare Date Selection", "type": "main", "index": 0 }
        ]
      ]
    },
    "Cache to Redis": {
      "main": [
        [
          { "node": "Generate Date Keyboard", "type": "main", "index": 0 }
        ]
      ]
    },
    "Handle Date Callback": {
      "main": [
        [
          { "node": "Get Cached Data", "type": "main", "index": 0 }
        ]
      ]
    },
    "Get Cached Data": {
      "main": [
        [
          { "node": "Merge Selection with Data", "type": "main", "index": 0 }
        ]
      ]
    },
    "Merge Selection with Data": {
      "main": [
        [
          { "node": "Calculate Statistics", "type": "main", "index": 0 }
        ]
      ]
    },
    "Calculate Statistics": {
      "main": [
        [
          { "node": "Send Statistics", "type": "main", "index": 0 }
        ]
      ]
    },
    "Validate Whitelist": {
      "main": [
        [
          { "node": "Is Authorized?", "type": "main", "index": 0 }
        ]
      ]
    },
    "Prepare Menu": {
      "main": [
        [
          { "node": "Send Menu", "type": "main", "index": 0 }
        ]
      ]
    },
    "Prepare Menu Response": {
      "main": [
        [
          { "node": "Send Menu Response", "type": "main", "index": 0 }
        ]
      ]
    },
    "Prepare Date Selection": {
      "main": [
        [
          { "node": "Send Date Selection", "type": "main", "index": 0 }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          { "node": "Parse CSV", "type": "main", "index": 0 }
        ]
      ]
    },
    "Get File from Telegram": {
      "main": [
        [
          { "node": "Extract from File", "type": "main", "index": 0 }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          { "node": "Validate Config", "type": "main", "index": 0 }
        ]
      ]
    },
    "Validate Config": {
      "main": [
        [
          { "node": "Extract User Data", "type": "main", "index": 0 }
        ]
      ]
    }
  },
  "pinData": {},
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1-patched",
  "meta": {
    "instanceId": "ozon-bot-instance"
  },
  "tags": []
}
