{
  "name": "Ozon Telegram Bot - Orders Analytics",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query"
        ],
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        300
      ],
      "id": "a1b2c3d4-1234-5678-9abc-def012345678",
      "name": "Telegram Trigger",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract user data\nconst message = $json.message;\nconst callback = $json.callback_query;\n\nconst userId = message?.from?.id || callback?.from?.id;\nconst chatId = message?.chat?.id || callback?.message?.chat?.id;\nconst messageText = message?.text || '';\nconst callbackData = callback?.data || '';\nconst document = message?.document || null;\n\nreturn [{\n  json: {\n    user_id: String(userId),\n    chat_id: String(chatId),\n    message_text: messageText,\n    callback_data: callbackData,\n    document: document\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ],
      "id": "b2c3d4e5-2345-6789-abcd-ef0123456789",
      "name": "Extract User Data"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:whitelist:{{ $json.user_id }}",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        680,
        300
      ],
      "id": "c3d4e5f6-3456-7890-bcde-f01234567890",
      "name": "Check Whitelist",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.is_whitelisted }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        900,
        300
      ],
      "id": "d4e5f6a7-4567-8901-cdef-012345678901",
      "name": "Is Authorized?"
    },
    {
      "parameters": {
        "chatId": "={{ $('Extract User Data').item.json.chat_id }}",
        "text": "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1120,
        460
      ],
      "id": "e5f6a7b8-5678-9012-def0-123456789012",
      "name": "Unauthorized Response",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:admins:{{ $('Extract User Data').item.json.user_id }}",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1120,
        140
      ],
      "id": "f6a7b8c9-6789-0123-ef01-234567890123",
      "name": "Check Admin",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-start",
                    "leftValue": "={{ $('Extract User Data').item.json.message_text }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-csv",
                    "leftValue": "={{ $('Extract User Data').item.json.document?.mime_type }}",
                    "rightValue": "text/csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CSV"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-menu",
                    "leftValue": "={{ $('Extract User Data').item.json.callback_data }}",
                    "rightValue": "menu:",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Menu"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cond-date",
                    "leftValue": "={{ $('Extract User Data').item.json.callback_data }}",
                    "rightValue": "date:",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DateSelection"
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1340,
        140
      ],
      "id": "a7b8c9d0-7890-1234-f012-345678901234",
      "name": "Route Message"
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').item.json.chat_id;\nconst isAdmin = $('Check Admin').item.json.value === '1';\n\nconst keyboard = {\n  inline_keyboard: [\n    [{text: 'üì¶ –ó–∞–∫–∞–∑—ã', callback_data: 'menu:orders'}],\n    [{text: 'üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã', callback_data: 'menu:clusters'}]\n  ]\n};\n\nif (isAdmin) {\n  keyboard.inline_keyboard.push([{text: '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞', callback_data: 'menu:admin'}]);\n}\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    text: 'ü§ñ **Ozon Analytics Bot**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',\n    reply_markup: keyboard\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        60
      ],
      "id": "b8c9d0e1-8901-2345-0123-456789012345",
      "name": "Generate Main Menu"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "reply_markup": "={{ JSON.stringify($json.reply_markup) }}",
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1780,
        60
      ],
      "id": "c9d0e1f2-9012-3456-1234-567890123456",
      "name": "Send Menu",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').item.json.chat_id;\nconst callbackData = $('Extract User Data').item.json.callback_data;\nconst isAdmin = $('Check Admin').item.json.value === '1';\n\nconst action = callbackData.replace('menu:', '');\n\nlet text = '';\nlet keyboard = {inline_keyboard: [[{text: '¬´ –ù–∞–∑–∞–¥', callback_data: '/start'}]]};\n\nif (action === 'orders') {\n  text = 'üì¶ **–†–∞–∑–¥–µ–ª: –ó–∞–∫–∞–∑—ã**\\n\\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º Ozon (FBO –∏–ª–∏ FBS) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\\n\\n*–§–æ—Ä–º–∞—Ç:* –¥–æ 20MB, .csv';\n} else if (action === 'clusters') {\n  text = 'üéØ **–†–∞–∑–¥–µ–ª: –ö–ª–∞—Å—Ç–µ—Ä—ã**\\n\\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.';\n} else if (action === 'admin' && isAdmin) {\n  text = '‚öôÔ∏è **–ê–¥–º–∏–Ω–∫–∞**\\n\\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:';\n  keyboard = {\n    inline_keyboard: [\n      [{text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:users'}],\n      [{text: '¬´ –ù–∞–∑–∞–¥', callback_data: '/start'}]\n    ]\n  };\n}\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    text: text,\n    reply_markup: keyboard\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        240
      ],
      "id": "d0e1f2a3-0123-4567-2345-678901234567",
      "name": "Handle Menu"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "reply_markup": "={{ JSON.stringify($json.reply_markup) }}",
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1780,
        240
      ],
      "id": "e1f2a3b4-1234-5678-3456-789012345678",
      "name": "Send Menu Response",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').item.json.chat_id;\nconst document = $('Extract User Data').item.json.document;\n\nif (!document || document.mime_type !== 'text/csv') {\n  return [{\n    json: {\n      chat_id: chatId,\n      text: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV',\n      reply_markup: null\n    }\n  }];\n}\n\nif (document.file_size > 20 * 1024 * 1024) {\n  return [{\n    json: {\n      chat_id: chatId,\n      text: '‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: 20MB',\n      reply_markup: null\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    text: '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é CSV —Ñ–∞–π–ª...\\n\\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.',\n    reply_markup: null\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        420
      ],
      "id": "f2a3b4c5-2345-6789-4567-890123456789",
      "name": "Handle CSV"
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/getFile?file_id={{ $('Extract User Data').item.json.document.file_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1780,
        420
      ],
      "id": "download-csv-1",
      "name": "Get File Path"
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/file/bot{{ $env.TELEGRAM_BOT_TOKEN }}/{{ $json.result.file_path }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2000,
        420
      ],
      "id": "download-csv-2",
      "name": "Download CSV"
    },
    {
      "parameters": {
        "jsCode": "// Parse CSV line handling quotes\nfunction parseCSVLine(line) {\n  const values = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      if (inQuotes && line[i + 1] === '\"') {\n        current += '\"';\n        i++;\n      } else {\n        inQuotes = !inQuotes;\n      }\n    } else if (char === ',' && !inQuotes) {\n      values.push(current.trim());\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  values.push(current.trim());\n  return values;\n}\n\nfunction detectReportType(headers) {\n  const headersLower = headers.map(h => h.toLowerCase());\n  if (headersLower.some(h => h.includes('–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'))) return 'FBO';\n  if (headersLower.some(h => h.includes('‚Ññ –∑–∞–∫–∞–∑–∞'))) return 'FBS';\n  return 'UNKNOWN';\n}\n\nfunction findValue(record, possibleKeys, fallback = '') {\n  for (const key of possibleKeys) {\n    if (record[key] !== undefined && record[key] !== '') {\n      return record[key];\n    }\n  }\n  return fallback;\n}\n\nfunction normalizeRecord(headers, values, reportType) {\n  const record = {};\n  headers.forEach((header, idx) => {\n    record[header] = values[idx] || '';\n  });\n\n  let orderId, sku, quantity, price, createdAt, status;\n\n  if (reportType === 'FBO') {\n    orderId = findValue(record, ['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'], values[0]);\n    sku = findValue(record, ['–ê—Ä—Ç–∏–∫—É–ª'], values[6]);\n    quantity = parseInt(findValue(record, ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], values[8]) || '1');\n    price = parseFloat(findValue(record, ['–¶–µ–Ω–∞'], values[13]) || '0');\n    createdAt = findValue(record, ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], values[15]);\n    status = findValue(record, ['–°—Ç–∞—Ç—É—Å'], values[16]);\n  } else {\n    orderId = findValue(record, ['‚Ññ –∑–∞–∫–∞–∑–∞'], values[0]);\n    sku = findValue(record, ['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞', '–ê—Ä—Ç–∏–∫—É–ª'], values[1]);\n    quantity = parseInt(findValue(record, ['–ö–æ–ª-–≤–æ'], values[2]) || '1');\n    price = parseFloat(findValue(record, ['–¶–µ–Ω–∞'], values[3]) || '0');\n    createdAt = findValue(record, ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], values[4]);\n    status = findValue(record, ['–°—Ç–∞—Ç—É—Å'], values[5]);\n  }\n\n  if (!orderId || !sku) return null;\n\n  return {\n    order_id: orderId,\n    sku: sku,\n    quantity: isNaN(quantity) ? 1 : quantity,\n    price: isNaN(price) ? 0 : price,\n    created_at: createdAt,\n    status: status ? status.toLowerCase() : ''\n  };\n}\n\n// Main parsing\nconst csvData = $input.item.json.data;\nconst lines = csvData.trim().split('\\n');\n\nif (lines.length < 2) {\n  throw new Error('CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π');\n}\n\nconst headers = parseCSVLine(lines[0]);\nconst reportType = detectReportType(headers);\n\nif (reportType === 'UNKNOWN') {\n  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç—á–µ—Ç–∞');\n}\n\nconst records = [];\nfor (let i = 1; i < lines.length; i++) {\n  const line = lines[i].trim();\n  if (!line) continue;\n  \n  try {\n    const values = parseCSVLine(line);\n    const record = normalizeRecord(headers, values, reportType);\n    if (record) records.push(record);\n  } catch (e) {}\n}\n\nconst dates = new Set();\nrecords.forEach(record => {\n  if (record.created_at) {\n    try {\n      const date = new Date(record.created_at);\n      const mskDate = new Date(date.getTime() + 3 * 60 * 60 * 1000);\n      const dateStr = mskDate.toISOString().split('T')[0];\n      dates.add(dateStr);\n    } catch (e) {}\n  }\n});\n\nconst availableDates = Array.from(dates).sort();\n\nreturn [{\n  json: {\n    reportType,\n    records,\n    availableDates,\n    totalRecords: records.length,\n    chat_id: $('Extract User Data').item.json.chat_id,\n    user_id: $('Extract User Data').item.json.user_id\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2220,
        420
      ],
      "id": "parse-csv-node",
      "name": "Parse CSV"
    },
    {
      "parameters": {
        "jsCode": "const parsedData = $input.item.json;\nconst availableDates = parsedData.availableDates;\n\nif (availableDates.length === 0) {\n  return [{\n    json: {\n      chat_id: parsedData.chat_id,\n      text: '‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã',\n      reply_markup: null\n    }\n  }];\n}\n\nconst keyboard = {\n  inline_keyboard: availableDates.slice(0, 10).map(date => [{\n    text: date,\n    callback_data: `date:${date}`\n  }])\n};\n\nreturn [{\n  json: {\n    chat_id: parsedData.chat_id,\n    text: `üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\\n\\n–¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${parsedData.reportType}\\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${parsedData.totalRecords}`,\n    reply_markup: keyboard\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        420
      ],
      "id": "date-keyboard-node",
      "name": "Generate Date Keyboard"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "reply_markup": "={{ JSON.stringify($json.reply_markup) }}",
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2660,
        420
      ],
      "id": "send-date-selection",
      "name": "Send Date Selection",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function filterRecordsByDateTime(records, date, startTime, endTime) {\n  return records.filter(record => {\n    try {\n      const recordDate = new Date(record.created_at);\n      const mskDate = new Date(recordDate.getTime() + 3 * 60 * 60 * 1000);\n      const recordDateStr = mskDate.toISOString().split('T')[0];\n      const recordTimeStr = mskDate.toTimeString().split(' ')[0].substring(0, 5);\n      \n      return recordDateStr === date && recordTimeStr >= startTime && recordTimeStr <= endTime;\n    } catch (e) {\n      return false;\n    }\n  });\n}\n\nfunction calculateStatistics(records, date, startTime, endTime) {\n  const filteredRecords = filterRecordsByDateTime(records, date, startTime, endTime);\n  \n  if (filteredRecords.length === 0) {\n    return {\n      date, startTime, endTime,\n      totalOrders: 0,\n      totalCancellations: 0,\n      totalRevenue: 0,\n      skuStats: {},\n      message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'\n    };\n  }\n\n  const statsBySku = {};\n  const revenueStatuses = ['–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', '–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', '–æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏', '–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫–∏'];\n  const cancelStatuses = ['–æ—Ç–º–µ–Ω—ë–Ω', '–æ—Ç–º–µ–Ω–µ–Ω', '–≤–æ–∑–≤—Ä–∞—Ç'];\n\n  filteredRecords.forEach(record => {\n    const sku = record.sku;\n    const status = record.status.toLowerCase();\n    const quantity = record.quantity || 1;\n    const price = record.price || 0;\n    \n    if (!statsBySku[sku]) {\n      statsBySku[sku] = {\n        totalOrders: 0,\n        cancellations: 0,\n        totalRevenue: 0,\n        weightedPriceSum: 0,\n        weightedQuantitySum: 0,\n        avgPrice: 0\n      };\n    }\n    \n    statsBySku[sku].totalOrders += quantity;\n    \n    if (cancelStatuses.some(s => status.includes(s))) {\n      statsBySku[sku].cancellations += quantity;\n    }\n    \n    if (revenueStatuses.some(s => status.includes(s))) {\n      statsBySku[sku].totalRevenue += price * quantity;\n      statsBySku[sku].weightedPriceSum += price * quantity;\n      statsBySku[sku].weightedQuantitySum += quantity;\n    }\n  });\n\n  Object.keys(statsBySku).forEach(sku => {\n    const stats = statsBySku[sku];\n    if (stats.weightedQuantitySum > 0) {\n      stats.avgPrice = stats.weightedPriceSum / stats.weightedQuantitySum;\n    }\n  });\n\n  let totalOrders = 0, totalCancellations = 0, totalRevenue = 0;\n  Object.values(statsBySku).forEach(stats => {\n    totalOrders += stats.totalOrders;\n    totalCancellations += stats.cancellations;\n    totalRevenue += stats.totalRevenue;\n  });\n\n  return { date, startTime, endTime, totalOrders, totalCancellations, totalRevenue, skuStats: statsBySku };\n}\n\nfunction formatStatisticsMessage(stats) {\n  let message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤**\\n\\n`;\n  message += `üìÖ –î–∞—Ç–∞: ${stats.date}\\n`;\n  message += `‚è∞ –í—Ä–µ–º—è: ${stats.startTime} - ${stats.endTime}\\n\\n`;\n\n  if (stats.totalOrders === 0) {\n    message += stats.message || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';\n    return message;\n  }\n\n  const sortedSkus = Object.keys(stats.skuStats).sort();\n  sortedSkus.forEach(sku => {\n    const skuStats = stats.skuStats[sku];\n    message += `**${sku}**\\n`;\n    message += `  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${skuStats.totalOrders}\\n`;\n    message += `  ‚Ä¢ –û—Ç–º–µ–Ω: ${skuStats.cancellations}\\n`;\n    message += `  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${skuStats.avgPrice.toFixed(2)} ‚ÇΩ\\n`;\n    message += `  ‚Ä¢ –°—É–º–º–∞: ${skuStats.totalRevenue.toFixed(2)} ‚ÇΩ\\n\\n`;\n  });\n\n  message += `**–ò–¢–û–ì–û:**\\n`;\n  message += `  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\\n`;\n  message += `  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω: ${stats.totalCancellations}\\n`;\n  message += `  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${stats.totalRevenue.toFixed(2)} ‚ÇΩ\\n`;\n\n  return message;\n}\n\n// Main execution\nconst parsedData = $input.item.json;\nconst date = $json.selectedDate || parsedData.availableDates[0];\nconst startTime = $json.startTime || '00:00';\nconst endTime = $json.endTime || '23:59';\n\nconst stats = calculateStatistics(parsedData.records, date, startTime, endTime);\nconst message = formatStatisticsMessage(stats);\n\nreturn [{\n  json: {\n    chat_id: parsedData.chat_id,\n    text: message,\n    stats: stats,\n    parsed_data: parsedData\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        600
      ],
      "id": "calc-stats-node",
      "name": "Calculate Statistics"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2660,
        600
      ],
      "id": "send-statistics",
      "name": "Send Statistics",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:cache:{{ $json.user_id }}:csv_data",
        "value": "={{ JSON.stringify($json) }}",
        "options": {
          "ttl": 3600
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2220,
        540
      ],
      "id": "cache-to-redis",
      "name": "Cache to Redis",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const callbackData = $('Extract User Data').item.json.callback_data;\nconst selectedDate = callbackData.replace('date:', '');\nconst userId = $('Extract User Data').item.json.user_id;\n\n// Load cached data from Redis would go here\n// For now, return selection info\nreturn [{\n  json: {\n    selectedDate: selectedDate,\n    user_id: userId,\n    chat_id: $('Extract User Data').item.json.chat_id,\n    startTime: '00:00',\n    endTime: '23:59'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        600
      ],
      "id": "handle-date-callback",
      "name": "Handle Date Callback"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:cache:{{ $json.user_id }}:csv_data",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1780,
        600
      ],
      "id": "get-cached-data",
      "name": "Get Cached Data",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dateSelection = $input.first().json;\nconst cachedData = JSON.parse($input.last().json.value || '{}');\n\nreturn [{\n  json: {\n    ...cachedData,\n    selectedDate: dateSelection.selectedDate,\n    startTime: dateSelection.startTime,\n    endTime: dateSelection.endTime,\n    chat_id: dateSelection.chat_id\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        600
      ],
      "id": "merge-selection-data",
      "name": "Merge Selection with Data"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        900
      ],
      "id": "manual-admin-trigger",
      "name": "üîß Manual: Add Super User"
    },
    {
      "parameters": {
        "jsCode": "// === –ù–ê–°–¢–†–û–ô–ö–ê –°–£–ü–ï–†-–Æ–ó–ï–†–ê ===\n// –ò–∑–º–µ–Ω–∏—Ç–µ USER_ID –Ω–∞ –Ω—É–∂–Ω—ã–π Telegram ID\n// –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot\n\nconst USER_ID = \"YOUR_TELEGRAM_USER_ID_HERE\";  // ‚Üê –ò–ó–ú–ï–ù–ò–¢–ï –≠–¢–û\n\n// –í–∞–ª–∏–¥–∞—Ü–∏—è\nif (!USER_ID || USER_ID === \"YOUR_TELEGRAM_USER_ID_HERE\") {\n  throw new Error(\"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω USER_ID! –û—Ç–∫—Ä–æ–π—Ç–µ node –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram User ID\");\n}\n\nif (!/^\\d+$/.test(USER_ID)) {\n  throw new Error(\"‚ùå USER_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\");\n}\n\nreturn [{\n  json: {\n    user_id: USER_ID,\n    message: `‚úÖ –î–æ–±–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${USER_ID} –≤ whitelist –∏ admins`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        900
      ],
      "id": "admin-setup-code",
      "name": "‚öôÔ∏è Configure User ID"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:acl:whitelist:{{ $json.user_id }}",
        "value": "1"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        680,
        900
      ],
      "id": "admin-add-whitelist",
      "name": "üìù Add to Whitelist",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:acl:admins:{{ $json.user_id }}",
        "value": "1"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        900,
        900
      ],
      "id": "admin-add-admins",
      "name": "üëë Add to Admins",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.first().json.user_id;\n\nreturn [{\n  json: {\n    success: true,\n    user_id: userId,\n    message: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`,\n    whitelist_key: `ozon:acl:whitelist:${userId}`,\n    admins_key: `ozon:acl:admins:${userId}`,\n    instructions: [\n      \"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Redis:\",\n      `   redis-cli GET \"ozon:acl:whitelist:${userId}\"`,\n      `   redis-cli GET \"ozon:acl:admins:${userId}\"`,\n      \"2. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram\",\n      \"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start\",\n      \"4. –í—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞'\"\n    ]\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        900
      ],
      "id": "admin-success-message",
      "name": "‚úÖ Success Message"
    },
    {
      "parameters": {
        "jsCode": "// –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist –∏–∑ Redis\nconst redisValue = $json.value;\n\n// Redis GET –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–≤–Ω–æ \"1\"\nconst isWhitelisted = redisValue !== null && \n                       redisValue !== undefined && \n                       String(redisValue) === \"1\";\n\nreturn [{\n  json: {\n    user_id: $('Extract User Data').item.json.user_id,\n    chat_id: $('Extract User Data').item.json.chat_id,\n    message_text: $('Extract User Data').item.json.message_text,\n    callback_data: $('Extract User Data').item.json.callback_data,\n    document: $('Extract User Data').item.json.document,\n    is_whitelisted: isWhitelisted,\n    redis_value: redisValue\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        790,
        300
      ],
      "id": "validate-whitelist-code",
      "name": "Validate Whitelist"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Extract User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract User Data": {
      "main": [
        [
          {
            "node": "Check Whitelist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Whitelist": {
      "main": [
        [
          {
            "node": "Validate Whitelist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Authorized?": {
      "main": [
        [
          {
            "node": "Check Admin",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Admin": {
      "main": [
        [
          {
            "node": "Route Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Message": {
      "main": [
        [
          {
            "node": "Generate Main Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Date Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Main Menu": {
      "main": [
        [
          {
            "node": "Send Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Menu": {
      "main": [
        [
          {
            "node": "Send Menu Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle CSV": {
      "main": [
        [
          {
            "node": "Get File Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File Path": {
      "main": [
        [
          {
            "node": "Download CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download CSV": {
      "main": [
        [
          {
            "node": "Parse CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV": {
      "main": [
        [
          {
            "node": "Cache to Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Date Keyboard": {
      "main": [
        [
          {
            "node": "Send Date Selection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache to Redis": {
      "main": [
        [
          {
            "node": "Generate Date Keyboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Date Callback": {
      "main": [
        [
          {
            "node": "Get Cached Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cached Data": {
      "main": [
        [
          {
            "node": "Merge Selection with Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Selection with Data": {
      "main": [
        [
          {
            "node": "Calculate Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Statistics": {
      "main": [
        [
          {
            "node": "Send Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîß Manual: Add Super User": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Configure User ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Configure User ID": {
      "main": [
        [
          {
            "node": "üìù Add to Whitelist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìù Add to Whitelist": {
      "main": [
        [
          {
            "node": "üëë Add to Admins",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üëë Add to Admins": {
      "main": [
        [
          {
            "node": "‚úÖ Success Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Whitelist": {
      "main": [
        [
          {
            "node": "Is Authorized?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "instanceId": "ozon-bot-instance"
  },
  "tags": []
}