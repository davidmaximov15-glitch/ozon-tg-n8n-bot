{
  "name": "Ozon Telegram Bot - Orders Analytics (patched, calendar)",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query"
        ],
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -2544,
        -104
      ],
      "id": "f0ac9437-9353-40ce-9def-aae4dccf0c88",
      "name": "Telegram Trigger",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      },
      "webhookId": "82d4cb90-49a4-4df5-8c1e-cd7e68c0feaf"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "telegram-bot-token-field",
              "name": "TELEGRAM_BOT_TOKEN",
              "value": "YOUR_TELEGRAM_BOT_TOKEN_HERE",
              "type": "string"
            },
            {
              "id": "superuser-ids-field",
              "name": "SUPERUSER_IDS",
              "value": "user_id_1,user_id_2",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2320,
        -104
      ],
      "id": "ef5126c2-f3f4-4630-b37f-7ab0c014de7d",
      "name": "Config"
    },
    {
      "parameters": {
        "jsCode": "// üîê Validate config\nconst token=$json.TELEGRAM_BOT_TOKEN; const su=$json.SUPERUSER_IDS;\nif(!token||token==='YOUR_TELEGRAM_BOT_TOKEN_HERE') throw new Error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');\nif(!su||su.trim()===''||su==='user_id_1,user_id_2') throw new Error('‚ùå SUPERUSER_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');\nreturn { json:$json, binary:$binary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2096,
        -104
      ],
      "id": "e2e7708d-22ac-4f58-8ded-6fdff4d76356",
      "name": "Validate Config"
    },
    {
      "parameters": {
        "jsCode": "// Extract user / message / callback\nconst t=$('Telegram Trigger').first().json; const m=t.message; const c=t.callback_query;\nconst userId=m?.from?.id||c?.from?.id; const chatId=m?.chat?.id||c?.message?.chat?.id;\nreturn { json:{...$json, user_id:String(userId), chat_id:String(chatId), message_text:m?.text||'', callback_data:c?.data||'', callback_query_id:c?.id||'', document:m?.document||null}, binary:$binary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1872,
        -104
      ],
      "id": "a18503a0-c810-4a56-8e15-fb73bfc48cd9",
      "name": "Extract User Data"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:whitelist:{{ $json.user_id }}",
        "propertyName": "value",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1648,
        -104
      ],
      "id": "7f8ae289-c9d5-4880-81fe-cf0a3e8db7f2",
      "name": "Check Whitelist",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// compute role flags\nconst uid = $('Extract User Data').first().json.user_id;\nconst su = $('Config').first().json.SUPERUSER_IDS || '';\nconst suIds = su.split(',').map(s => s.trim()).filter(Boolean);\nconst isSu = suIds.includes(uid);\n\n// —á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Get –∏–∑ –¥–≤—É—Ö –Ω–æ–¥\nconst wRaw = $('Check Whitelist').first().json.value; // '1' | null\nconst aRaw = $('Check Admin').first().json.value;     // '1' | null\n\nconst isWhitelisted = wRaw === '1';\nconst isAdmin = aRaw === '1' || isSu;\n\nif (!isAdmin && !isWhitelisted && !isSu) {\n  throw new Error('‚õî Access denied');\n}\n\nreturn {\n  json: {\n    ...$('Extract User Data').first().json,\n    is_superuser: isSu,\n    is_admin: isAdmin,\n    is_whitelisted: isWhitelisted\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        -104
      ],
      "id": "5dec3247-23fc-49a0-b084-7cd28ccc8926",
      "name": "Validate Whitelist"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ok",
              "leftValue": "={{ $json.is_superuser === true || $json.is_admin === true }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1200,
        -104
      ],
      "id": "0633708e-fef3-4b4a-b0ce-d01267049ebd",
      "name": "Is Authorized?"
    },
    {
      "parameters": {
        "chatId": "={{ $('Extract User Data').first().json.chat_id }}",
        "text": "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -976,
        88
      ],
      "id": "0c01992d-48ef-4262-8367-b0b608b03c90",
      "name": "Unauthorized Response",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      },
      "webhookId": "da1cb35b-5084-44cf-bedc-da8c95548b04"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:acl:admins:{{ $json.user_id }}",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -976,
        -296
      ],
      "id": "05c1734e-b91f-4ea0-be62-fc4d49f36caa",
      "name": "Check Admin",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      },
      "webhookId": "8eaef24d-9dac-4ad5-b2a6-bd50c44bef10"
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "outputKey": "Start",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.message_text }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "CSV",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}",
                    "rightValue": "text/csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}",
                    "rightValue": "application/vnd.ms-excel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.document?.file_name }}",
                    "rightValue": ".csv",
                    "operator": {
                      "type": "string",
                      "operation": "endsWith"
                    }
                  }
                ],
                "combinator": "or"
              }
            },
            {
              "outputKey": "XLSX",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.document?.file_name }}",
                    "rightValue": ".xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "endsWith"
                    }
                  }
                ],
                "combinator": "or"
              }
            },
            {
              "outputKey": "Menu",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "menu:",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "DateSelection",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "date:",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "CalNav",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "cal:",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "DatesDone",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "dates:done",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "DatesReset",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "dates:reset",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "Noop",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "noop",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "CalOpen",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "cal:open",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "FileClear",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "file:clear",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "outputKey": "FileUpload",
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
                    "rightValue": "file:upload",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "renameOutput": true,
          "fallbackOutput": "none",
          "ignoreCase": false,
          "lessStrictTypeValidation": false,
          "sendDataToAllMatches": false
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -752,
        -296
      ],
      "id": "d24de0d3-4b1a-4a36-a98d-1862c89e9de8",
      "name": "Route Message"
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Extract User Data').first().json.chat_id;\nconst adminRaw = $('Check Admin').first().json.value;\nconst isAdmin = adminRaw === '1';\n\nconst kb = {\n  inline_keyboard: [\n    [{ text: 'üì¶ –ó–∞–∫–∞–∑—ã', callback_data: 'menu:orders' }],\n    [{ text: 'üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã', callback_data: 'menu:clusters' }]\n  ]\n};\n\nif (isAdmin) {\n  kb.inline_keyboard.push([{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞', callback_data: 'menu:admin' }]);\n}\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    text: 'ü§ñ <b>Ozon Analytics Bot</b>\\\\n\\\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',\n    reply_markup: kb\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        -296
      ],
      "id": "da9b4fc0-65de-44f1-b38b-58f7b73e55bb",
      "name": "Generate Main Menu"
    },
    {
      "parameters": {
        "jsCode": "const input=$json; const kb=input.reply_markup?.inline_keyboard||[];\nreturn [{ json:{ chat_id:input.chat_id, text:input.text, parse_mode:'HTML', reply_markup:{inline_keyboard:kb} } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        -296
      ],
      "id": "9c0aee30-f4bc-4aee-9f83-4c82fc1fa3e9",
      "name": "Prepare Menu"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -80,
        -296
      ],
      "id": "a5b4b69b-2f75-46df-9631-7a57e48e7be1",
      "name": "Send Menu"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $('Extract User Data').first().json.callback_data }}",
              "rightValue": "menu:orders",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        144,
        -296
      ],
      "id": "a37e66d2-e583-44cd-8b07-8c0e8ac83f01",
      "name": "Handle Menu"
    },
    {
      "parameters": {
        "jsCode": "const input=$json; const kb=input.reply_markup?.inline_keyboard||[];\nreturn [{ json:{ chat_id:input.chat_id, text:input.text, parse_mode:'HTML', reply_markup:{inline_keyboard:kb} } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        280
      ],
      "id": "ae6d2ae0-d1d3-4cf8-90f4-6c96e48d9a08",
      "name": "Prepare Menu Response"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -752,
        280
      ],
      "id": "70a54a2b-59c6-4f14-b39f-17cdaa2cd38a",
      "name": "Send Menu Response"
    },
    {
      "parameters": {
        "jsCode": "const d=$('Extract User Data').first().json.document||{}; const name=(d.file_name||'').toLowerCase(); const mime=(d.mime_type||'').toLowerCase();\nconst isCsv= mime==='text/csv'|| mime==='application/vnd.ms-excel'|| name.endsWith('.csv');\nif(!d.file_id||!isCsv) return [];\nreturn [{json:$json}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        280
      ],
      "id": "7c1f2eb0-ba2b-44d0-adf3-c68cc41d70ce",
      "name": "Ensure CSV Document"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Extract User Data').first().json.document.file_id }}",
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -304,
        280
      ],
      "id": "6aaf4e6a-e06e-4876-b4ee-bfcaaa4b3d35",
      "name": "Get File from Telegram",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "csv",
        "options": {
          "delimiter": ";",
          "relaxQuotes": true
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -80,
        280
      ],
      "id": "6cd51dd6-8a77-4dde-af7e-fa5deb1bbeb4",
      "name": "Extract from File (CSV)"
    },
    {
      "parameters": {
        "jsCode": "function parseAsMsk(s){ if(!s) return null; let d=s; if(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(d)) d=d.replace(' ','T')+'Z'; const base=new Date(d); if(isNaN(base)) return null; return new Date(base.getTime()+3*3600*1000);} \nconst RE_BOM=/^\\uFEFF/; const RE_NBSP=/\\u00A0/g; const RE_Q=/^\"+|\"+$/g; const RE_S=/\\s+/g;\nconst cleanK=k=>String(k??'').replace(RE_BOM,'').replace(RE_NBSP,' ').replace(RE_Q,'').trim().replace(RE_S,' ');\nconst cleanV=v=>String(v??'').replace(RE_BOM,'').trim();\nconst toNum=v=>{const s=String(v??'').replace(/\\s/g,'').replace(',','.'); const n=Number(s); return Number.isFinite(n)?n:0;};\nconst rows=$input.all().map(i=>i.json.row??i.json).filter(Boolean).map(row=>{const o={}; for(const k of Object.keys(row)){ o[cleanK(k)] = cleanV(row[k]); } return o;});\nconst allKeys=new Set(); rows.slice(0,5).forEach(r=>Object.keys(r).forEach(k=>allKeys.add(k.toLowerCase())));\nconst has=f=>Array.from(allKeys).some(k=>k.includes(f));\nconst reportType = (has('—Å–ø–æ—Å–æ–± –æ—Ç–≥—Ä—É–∑–∫–∏')||has('–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫')||has('–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞')||has('–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏'))&&! (has('—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ')||has('–æ—Ü–µ–Ω–∫–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')) ? 'FBS' : 'FBO';\nfunction pick(rec,cands,fb=''){ for(const name of cands){ const ck=cleanK(name); if(rec[ck]!==undefined && String(rec[ck]).trim()!=='') return rec[ck]; }\n const keys=Object.keys(rec); for(const name of cands){ const cl=cleanK(name).toLowerCase(); const f=keys.find(k=>k.toLowerCase()===cl); if(f && String(rec[f]).trim()!=='') return rec[f]; } return fb; }\nconst records=[]; for(const r of rows){ let order_id,sku,quantity,price,created_at,status; if(reportType==='FBO'){ order_id=pick(r,['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']); sku=pick(r,['–ê—Ä—Ç–∏–∫—É–ª','OZON id','OZON ID']); quantity=toNum(pick(r,['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],1)); price=toNum(pick(r,['–í–∞—à–∞ —Ü–µ–Ω–∞','–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],0)); created_at=pick(r,['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É']); status=pick(r,['–°—Ç–∞—Ç—É—Å'],''); } else { order_id=pick(r,['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞','‚Ññ –∑–∞–∫–∞–∑–∞']); sku=pick(r,['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞','–ê—Ä—Ç–∏–∫—É–ª','OZON id','OZON ID']); quantity=toNum(pick(r,['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–ö–æ–ª-–≤–æ'],1)); price=toNum(pick(r,['–í–∞—à–∞ —Ü–µ–Ω–∞','–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],0)); created_at=pick(r,['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏']); status=pick(r,['–°—Ç–∞—Ç—É—Å'],''); }\n if(!order_id||!sku) continue; records.push({order_id:String(order_id), sku:String(sku), quantity, price, created_at:String(created_at), status:String(status).toLowerCase()}); }\nconst setDates=new Set(); for(const rec of records){ const d=parseAsMsk(rec.created_at); if(!d) continue; setDates.add(d.toISOString().split('T')[0]); }\nreturn [{json:{ reportType, records, availableDates:Array.from(setDates).sort(), totalRecords:records.length, chat_id:$('Extract User Data').first().json.chat_id, user_id:$('Extract User Data').first().json.user_id }}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        280
      ],
      "id": "99da2c54-fa5f-41f4-bce9-caa1d4ca1cf1",
      "name": "Parse Report File"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:sess:{{ $json.user_id }}:csv",
        "value": "={{ JSON.stringify({ reportType: $json.reportType, records: $json.records, availableDates: $json.availableDates, totalRecords: $json.totalRecords }) }}",
        "options": {
          "ttl": 259200
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        368,
        280
      ],
      "id": "95ceb8a6-4a48-4dc6-9ba1-df7e59f05ab1",
      "name": "Cache CSV Meta",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let meta={};\ntry{ const raw=$('Fetch CSV Meta (for calendar)').first()?.json.value || $('Cache CSV Meta').first()?.json.value; meta = raw? JSON.parse(raw):{}; }catch(e){ meta={}; }\nconst dates = Array.isArray(meta.availableDates)? meta.availableDates:[];\nif(!dates.length) return [{ json: { month:null } }];\nconst months = Array.from(new Set(dates.map(d=>d.slice(0,7)))).sort();\nconst month = months[months.length-1];\nreturn [{ json: { month, months, minMonth: months[0], maxMonth: months[months.length-1], user_id: $('Extract User Data').first().json.user_id, chat_id: $('Extract User Data').first().json.chat_id } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        280
      ],
      "id": "33b51c54-3b67-4e6a-a7a9-7bc2fd2d2d30",
      "name": "Calc Initial Month"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:csv",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        816,
        280
      ],
      "id": "ead18c3f-f25e-4e6b-81ef-33f4fe02e3eb",
      "name": "Fetch CSV Meta (for calendar)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:dates",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1040,
        280
      ],
      "id": "b4f4e0c4-c044-49e0-b30e-49963ce47c23",
      "name": "Get Selected Dates",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// input: callback_data = \"cal:YYYY-MM:prev\" | \"cal:YYYY-MM:next\"\nconst cb = $('Extract User Data').first().json.callback_data || '';\nconst [, ym, dir] = cb.split(':'); // [\"cal\",\"YYYY-MM\",\"prev|next\"]\n\nfunction shiftMonth(ymStr, step) {\n  const [y, m] = ymStr.split('-').map(Number);\n  const d = new Date(Date.UTC(y, (m - 1) + step, 1));\n  return `${d.getUTCFullYear()}-${String(d.getUTCMonth()+1).padStart(2,'0')}`;\n}\n\n// –Ω–∞–≤–∏–≥–∞—Ü–∏—è\nconst nextMonth = dir === 'prev' ? shiftMonth(ym, -1)\n                 : dir === 'next' ? shiftMonth(ym,  1)\n                 : ym;\n\n// –æ—Ç–¥–∞—ë–º –¥–∞–ª—å—à–µ –º–µ—Å—è—Ü –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç\nreturn [{\n  json: {\n    month: nextMonth,\n    chat_id: $('Extract User Data').first().json.chat_id,\n    user_id: $('Extract User Data').first().json.user_id\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        472
      ],
      "id": "22c7ce4c-5619-4fc2-8097-dc37d3a8dd85",
      "name": "Handle Calendar Nav",
      "webhookId": "3f0aa52c-c6e5-4c2f-a23f-0da4eb31f076"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:dates",
        "propertyName": "value",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -752,
        472
      ],
      "id": "de67e8c0-dfaf-41f8-8c89-6b40b5cd25a7",
      "name": "Get Selected Dates (toggle)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dateStr = $('Extract User Data').first().json.callback_data.replace('date:', '');\nconst userId  = $('Extract User Data').first().json.user_id;\nlet available = [];\ntry {\n  const raw = $('Fetch Cached Data (for grid)').first()?.json?.value || $('Fetch CSV Meta (calopen)').first()?.json?.value;\n  const obj = raw ? JSON.parse(raw) : {};\n  available = Array.isArray(obj.availableDates) ? obj.availableDates : [];\n} catch(e){ available = []; }\nconst isAvailable = available.includes(dateStr);\nif (!isAvailable) {\n  return [{ json: { user_id: userId, selectedDates: [], hitLimit: false, unavailable: true } }];\n}\nlet selected = [];\ntry {\n  const rawSel = $('Get Selected Dates (toggle)').first()?.json?.value;\n  selected = rawSel ? JSON.parse(rawSel) : [];\n} catch(e){ selected = []; }\nconst MAX = 3;\nif (selected.includes(dateStr)) {\n  selected = selected.filter(d => d !== dateStr);\n  return [{ json: { user_id: userId, selectedDates: selected, hitLimit: false, unavailable: false, toggled: 'removed', dateStr } }];\n}\nif (selected.length >= MAX) {\n  return [{ json: { user_id: userId, selectedDates: selected, hitLimit: true, unavailable: false, toggled: 'blocked', dateStr } }];\n}\nselected.push(dateStr);\nreturn [{ json: { user_id: userId, selectedDates: selected, hitLimit: false, unavailable: false, toggled: 'added', dateStr } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        472
      ],
      "id": "d00406ff-f0f1-4edc-9c5d-6cb621ed8e7f",
      "name": "Toggle Date"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:sess:{{ $json.user_id }}:dates",
        "value": "={{ JSON.stringify($json.selectedDates || []) }}",
        "options": {
          "ttl": 86400
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -304,
        472
      ],
      "id": "deb05a4f-79fc-408a-9f17-fe77f54c8de4",
      "name": "Persist Selected Dates",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }}, \"text\": \"–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –¥–∞—Ç\", \"show_alert\": false }"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -80,
        472
      ],
      "id": "1d39c1b3-56f6-49a6-ad4f-e8c6a0c77ba9",
      "name": "Answer Callback (limit)"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:csv",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        144,
        472
      ],
      "id": "c1a5e0c0-adce-4e0f-9c47-70c89062d2c1",
      "name": "Fetch Cached Data (for grid)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{ json:{ selectedDates:[], user_id:$('Extract User Data').first().json.user_id } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        472
      ],
      "id": "32f74e8f-b1c1-4aa6-9612-cc9c83d40e76",
      "name": "Reset Dates"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:sess:{{ $json.user_id }}:dates",
        "value": "={{ JSON.stringify([]) }}",
        "options": {
          "ttl": 86400
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        592,
        472
      ],
      "id": "e2f87e2b-f0f4-40e4-80df-3ed4bd0c1d53",
      "name": "Persist Selected (Reset)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }}, \"text\": \"–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É\", \"show_alert\": false }"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        816,
        472
      ],
      "id": "b19baae2-a3db-4224-b5f9-8d9f58dc19cb",
      "name": "Answer Callback (needSelect)"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:dates",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1040,
        472
      ],
      "id": "9bbac4f6-6b13-421d-9c4d-a3a7e1f37e7a",
      "name": "Get Selected Dates (Done)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let selected=[]; try{ const raw=$('Get Selected Dates (Done)').first().json.value; selected=raw?JSON.parse(raw):[]; }catch(e){}\nif(!selected.length) return [{json:{needSelect:true}}];\nreturn [{ json:{ selectedDates:selected, user_id:$('Extract User Data').first().json.user_id, chat_id:$('Extract User Data').first().json.chat_id, startTime:'00:00', endTime:'23:59' } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        472
      ],
      "id": "a7ffd8ac-2963-41a1-a0b2-5ef0dbf67d99",
      "name": "Handle Done"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $json.user_id }}:csv",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1488,
        472
      ],
      "id": "c7a7bf02-3e42-4ae6-8c02-5fd2e8ad2cf0",
      "name": "Get Cached Data (for stats)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function parseAsMsk(s){ if(!s) return null; let d=s; if(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(d)) d=d.replace(' ','T')+'Z'; const base=new Date(d); if(isNaN(base)) return null; return new Date(base.getTime()+3*3600*1000);} \nfunction filterRecords(records, dates, st, et){ const set=new Set(dates); return records.filter(r=>{ const dd=parseAsMsk(r.created_at); if(!dd) return false; const ds=dd.toISOString().split('T')[0]; if(!set.has(ds)) return false; const tm=dd.toTimeString().slice(0,5); return tm>=st && tm<=et; }); }\nfunction calc(records,dates,st,et){ const list=filterRecords(records,dates,st,et); if(!list.length) return {date:dates,startTime:st,endTime:et,totalOrders:0,totalCancellations:0,totalRevenue:0,skuStats:{},message:'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}; const bySku={}; const revS=['–¥–æ—Å—Ç–∞–≤–ª–µ–Ω','–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è','–æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏','–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫–∏']; const cancS=['–æ—Ç–º–µ–Ω—ë–Ω','–æ—Ç–º–µ–Ω–µ–Ω','–≤–æ–∑–≤—Ä–∞—Ç']; list.forEach(r=>{ const sku=r.sku; const q=r.quantity||1; const p=r.price||0; const st=r.status||''; bySku[sku] ||= {totalOrders:0,cancellations:0,totalRevenue:0,weightedPriceSum:0,weightedQuantitySum:0,avgPrice:0}; bySku[sku].totalOrders+=q; if(cancS.some(s=>st.includes(s))) bySku[sku].cancellations+=q; if(revS.some(s=>st.includes(s))){ bySku[sku].totalRevenue+=p*q; bySku[sku].weightedPriceSum+=p*q; bySku[sku].weightedQuantitySum+=q; } }); Object.values(bySku).forEach(s=>{ if(s.weightedQuantitySum>0) s.avgPrice=s.weightedPriceSum/s.weightedQuantitySum;}); let tO=0,tC=0,tR=0; Object.values(bySku).forEach(s=>{ tO+=s.totalOrders; tC+=s.cancellations; tR+=s.totalRevenue;}); return {date:dates,startTime:st,endTime:et,totalOrders:tO,totalCancellations:tC,totalRevenue:tR,skuStats:bySku}; }\nlet meta={}; try{ meta=JSON.parse($('Get Cached Data (for stats)').first().json.value||'{}'); }catch(e){}\nconst dates=$('Handle Done').first().json.selectedDates||[]; const st=$('Handle Done').first().json.startTime; const et=$('Handle Done').first().json.endTime; const stats=calc(meta.records||[], dates, st, et);\nfunction fmt(s){ let m=`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\\n\\n`; m+=`üìÖ –î–∞—Ç—ã: ${Array.isArray(s.date)?s.date.join(', '):s.date}\\n`; m+=`‚è∞ –í—Ä–µ–º—è: ${s.startTime} - ${s.endTime}\\n\\n`; if(s.totalOrders===0){ m+=s.message||'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; return m; } const keys=Object.keys(s.skuStats).sort(); for(const k of keys){ const x=s.skuStats[k]; m+=`<b>${k}</b>\\n  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${x.totalOrders}\\n  ‚Ä¢ –û—Ç–º–µ–Ω: ${x.cancellations}\\n  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${x.avgPrice.toFixed(2)} ‚ÇΩ\\n  ‚Ä¢ –°—É–º–º–∞: ${x.totalRevenue.toFixed(2)} ‚ÇΩ\\n\\n`; } m+=`<b>–ò–¢–û–ì–û:</b>\\n  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${s.totalOrders}\\n  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω: ${s.totalCancellations}\\n  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${s.totalRevenue.toFixed(2)} ‚ÇΩ\\n`; return m; }\nreturn [{ json:{ chat_id:$('Handle Done').first().json.chat_id, text:fmt(stats) } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        664
      ],
      "id": "b2cbed38-e8bb-40c1-b88f-38cc32bbb7e8",
      "name": "Calculate Statistics",
      "webhookId": "d5e07d50-f5ee-4a3e-997e-3f83f89e1ff5"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "HTML",
          "appendAttribution": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -752,
        664
      ],
      "id": "4f9c75c3-6d0c-479f-b6bc-9d3c6ec4fd06",
      "name": "Send Statistics",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const d=$('Extract User Data').first().json.document||{}; const name=(d.file_name||'').toLowerCase(); const mime=(d.mime_type||'').toLowerCase();\nconst isXlsx= mime==='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'|| name.endsWith('.xlsx');\nif(!d.file_id||!isXlsx) return [];\nreturn [{json:$json}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        664
      ],
      "id": "6ab5b64a-1b99-42e0-b0e3-5e2fa18ff9a4",
      "name": "Ensure XLSX Document"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Extract User Data').first().json.document.file_id }}",
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -304,
        664
      ],
      "id": "01d2a2a7-1e1a-4d77-9be1-02d43a1023b9",
      "name": "Get XLSX from Telegram",
      "credentials": {
        "telegramApi": {
          "id": "p4dTUZho7h1VsmzM",
          "name": "Tg Ozon.Orders bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -80,
        664
      ],
      "id": "c4a2e58f-eb97-42bd-8e40-c7a5e3ec3e8f",
      "name": "Extract from File (XLSX)"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:csv",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        144,
        664
      ],
      "id": "05e5e1dc-c1c7-46fd-9bce-1f3c99b4f41d",
      "name": "Get CSV Meta (Menu)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const chatId=$('Extract User Data').first().json.chat_id;\nlet meta={};\ntry{ const raw=$('Get CSV Meta (Menu)').first().json.value; meta= raw? JSON.parse(raw):{}; }catch(e){ meta={}; }\nconst hasFile = meta && Array.isArray(meta.availableDates) && meta.availableDates.length>0;\nlet text = 'üì¶ <b>–†–∞–∑–¥–µ–ª: –ó–∞–∫–∞–∑—ã</b>\\n\\n';\nif(hasFile){\n  const months = Array.from(new Set((meta.availableDates||[]).map(d=>d.slice(0,7)))).sort();\n  text += `‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\\n–î–∏–∞–ø–∞–∑–æ–Ω: <b>${months[0]}</b>${months.length>1?` ‚Ä¶ <b>${months[months.length-1]}</b>`:''}\\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>${meta.totalRecords||0}</b>\\n\\n`;\n} else {\n  text += '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç Ozon (.csv/.xlsx, –¥–æ 20MB), –∑–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\\n\\n';\n}\nconst kb = { inline_keyboard: [] };\nkb.inline_keyboard.push([{ text: 'üìÖ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'cal:open' }]);\nkb.inline_keyboard.push([{ text: 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª', callback_data: 'file:clear' }]);\nkb.inline_keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: '/start' }]);\nreturn [{ json: { chat_id: chatId, text, reply_markup: kb } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        664
      ],
      "id": "89ce1db2-18ed-4487-b14d-d3aacc4b5fb9",
      "name": "Render Orders Menu"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:csv",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        592,
        664
      ],
      "id": "1f5f5d81-6a47-44b6-956f-2ac7ca90c044",
      "name": "Fetch CSV Meta (calopen)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ !!($json.value) }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        816,
        664
      ],
      "id": "9db97d61-cd60-42e8-9be2-1e7b1ec5d8be",
      "name": "Has File? (calopen)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1040,
        664
      ],
      "id": "bb76e603-0a69-49e9-a40c-11e4fcabed59",
      "name": "Answer Callback (need file)"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:ui:{{ $('Extract User Data').first().json.user_id }}:calendar_msg_id",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1264,
        664
      ],
      "id": "8c14b6fb-b9d6-492e-b4f4-35879d32ee8c",
      "name": "Get Calendar Msg ID (clear)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ !!$json.value }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1488,
        664
      ],
      "id": "47eb24f7-e850-4d54-94f8-ca2e5fb7aed1",
      "name": "Has Calendar Msg? (clear)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/deleteMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ chat_id: $('Extract User Data').first().json.chat_id, message_id: $('Get Calendar Msg ID (clear)').first().json.value }) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -976,
        856
      ],
      "id": "a8eed8fa-6a92-4a93-abdb-96e37be7f7a6",
      "name": "Delete Calendar Message",
      "webhookId": "c4ea6e62-4c06-4bbb-a70a-ece5e2d3e6b2"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:csv",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -752,
        856
      ],
      "id": "70e6d48c-d1bb-4d5b-89ce-8ae62fb1e1bb",
      "name": "Del csv_data",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=ozon:sess:{{ $('Extract User Data').first().json.user_id }}:dates"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -528,
        856
      ],
      "id": "42f0c9bf-d2d5-40cb-91e0-6adbfa45c8c3",
      "name": "Del selected_dates",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=ozon:ui:{{ $('Extract User Data').first().json.user_id }}:calendar_msg_id"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -304,
        856
      ],
      "id": "bd69816d-6d41-46f0-9bc5-8e93c2dd5195",
      "name": "Del calendar_msg_id",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–§–∞–π–ª –∏ –≤—ã–±–æ—Ä –¥–∞—Ç –æ—á–∏—â–µ–Ω—ã\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -80,
        856
      ],
      "id": "2ae3a52e-fbfe-4065-a71a-ec93c5b37411",
      "name": "Answer Callback (cleared)"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:ui:{{ $json.user_id }}:cal_month",
        "value": "={{ $json.month }}",
        "options": {
          "ttl": 86400
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        144,
        856
      ],
      "id": "6b91a38f-3401-48e5-8a0f-1e7daef5cd4d",
      "name": "Persist Cal Month (initial)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:ui:{{ $('Extract User Data').first().json.user_id }}:cal_month",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        368,
        856
      ],
      "id": "c9f6e29f-b2f1-44d3-b6d0-9e1e19e1f9f2",
      "name": "Get Month (Render smart)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let month = $('Get Month (Render smart)').first()?.json.value || $('Calc Initial Month').first()?.json.month || $json.month;\nlet meta={};\ntry{ const raw=$('Fetch CSV Meta (for calendar)').first()?.json.value || $('Fetch CSV (Render)').first()?.json.value; meta = raw? JSON.parse(raw):{}; }catch(e){ meta={}; }\nconst available = Array.isArray(meta.availableDates)? meta.availableDates:[];\nconst months = Array.from(new Set(available.map(d=>d.slice(0,7)))).sort();\nconst minMonth = months[0]; const maxMonth = months[months.length-1];\nlet selected = [];\ntry{ const rawSel = $('Get Selected Dates').first()?.json?.value; selected = rawSel? JSON.parse(rawSel):[]; }catch(e){ selected = []; }\nreturn [{ json: { chat_id: $('Extract User Data').first().json.chat_id, user_id: $('Extract User Data').first().json.user_id, month, minMonth, maxMonth, availableDates: available, selectedDates: selected } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        856
      ],
      "id": "52b6a1a0-3c0d-4a8e-9a9b-cd6c7e5e8f4a",
      "name": "Ensure Month (smart)"
    },
    {
      "parameters": {
        "jsCode": "function daysInMonth(ms){ const [y,m]=ms.split('-').map(Number); return new Date(y, m, 0).getDate(); }\nconst {\n  chat_id, month, minMonth, maxMonth,\n  availableDates, selectedDates,\n  selectionSummary = { totalOrders: 0, totalRevenue: 0 }\n} = $json;\nconst [Y,M] = month.split('-').map(Number);\nconst total = daysInMonth(month);\nconst setAvail = new Set((availableDates||[]).filter(d=>d.startsWith(month)));\nconst selected = Array.isArray(selectedDates) ? selectedDates : [];\nconst setSel = new Set(selected);\nconst hasPrev = month > minMonth;\nconst hasNext = month < maxMonth;\nconst navRow = [\n  { text: hasPrev ? '‚óÄ' : '‚ñ™', callback_data: hasPrev ? `cal:${month}:prev` : 'noop' },\n  { text: month,                 callback_data: 'noop' },\n  { text: hasNext ? '‚ñ∂' : '‚ñ™',   callback_data: hasNext ? `cal:${month}:next` : 'noop' }\n];\nconst rows = [];\nlet day=1;\nwhile(day<=total){\n  const row = [];\n  for(let i=0;i<7 && day<=total;i++){\n    const d = String(day).padStart(2,'0');\n    const full = `${month}-${d}`;\n    const isAvail = setAvail.has(full);\n    const isSel   = setSel.has(full);\n    if(isAvail){\n      row.push({ text: (isSel?'‚òë ':'‚ñ´ ')+String(day), callback_data: `date:${full}` });\n    }else{\n      row.push({ text: '¬∑ '+String(day), callback_data: 'noop' });\n    }\n    day++;\n  }\n  rows.push(row);\n}\nconst MAX = 3;\nlet selectedLine = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 –¥–∞—Ç:';\nif (setSel.size) {\n  const preview = Array.from(setSel).slice(0, 5).join(', ');\n  selectedLine = `–í—ã–±—Ä–∞–Ω–æ (${setSel.size}/${MAX}): ${preview}`;\n}\nconst mini = `–ò—Ç–æ–≥–æ: –∑–∞–∫–∞–∑—ã ${selectionSummary.totalOrders} ‚Ä¢ —Å—É–º–º–∞ ${selectionSummary.totalRevenue.toFixed(2)} ‚ÇΩ`;\nconst controls = [];\ncontrols.push({ text: (setSel.size? '‚úÖ –ì–æ—Ç–æ–≤–æ':'üîí –ì–æ—Ç–æ–≤–æ'), callback_data: (setSel.size? 'dates:done':'noop') });\ncontrols.push({ text: 'üßπ –°–±—Ä–æ—Å', callback_data: 'dates:reset' });\nconst fileRow = [\n  { text: 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', callback_data: 'file:upload' },\n  { text: 'üßØ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª',  callback_data: 'file:clear'  }\n];\nconst kb = { inline_keyboard: [navRow, ...rows, controls, fileRow] };\nconst text = `üìÖ <b>–ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –¥–∞—Ç</b>\\\\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ: <b>${minMonth}</b> ‚Ä¶ <b>${maxMonth}</b>\\\\n${selectedLine}\\\\n${mini}`;\nreturn [{ json: { chat_id, text, parse_mode: 'HTML', reply_markup: kb } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        856
      ],
      "id": "ea5f8e29-4c5f-4b8c-a8e0-1d2b3c4d5e6f",
      "name": "Render Calendar (smart)"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:ui:{{ $('Extract User Data').first().json.user_id }}:calendar_msg_id",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1040,
        856
      ],
      "id": "fc1a2b3c-4d5e-6f78-90ab-cdef12345678",
      "name": "Get Calendar Msg ID (smart)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ !!$json.value }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -976,
        1048
      ],
      "id": "ab12cd34-ef56-7890-abcd-ef1234567890",
      "name": "Has Calendar Msg? (smart)",
      "webhookId": "12345678-90ab-cdef-1234-567890abcdef"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/editMessageText",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ chat_id: $('Ensure Month (smart)').first().json.chat_id, message_id: $('Get Calendar Msg ID (smart)').first().json.value, text: $json.text, parse_mode:'HTML', reply_markup: $json.reply_markup }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -752,
        1048
      ],
      "id": "fedcba98-7654-3210-fedc-ba9876543210",
      "name": "Edit Calendar (smart)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ chat_id: $('Ensure Month (smart)').first().json.chat_id, text: $json.text, parse_mode:'HTML', reply_markup: $json.reply_markup }) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -528,
        1048
      ],
      "id": "11223344-5566-7788-99aa-bbccddeeff00",
      "name": "Send Calendar (smart)"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=ozon:ui:{{ $('Extract User Data').first().json.user_id }}:calendar_msg_id",
        "value": "={{ $json.result?.message_id || $json.message_id || $json.result?.message?.message_id }}",
        "options": {
          "ttl": 86400
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -304,
        1048
      ],
      "id": "aabbccdd-eeff-0011-2233-445566778899",
      "name": "Persist Calendar Msg ID (smart)",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.hitLimit === true }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        1048
      ],
      "id": "99887766-5544-3322-1100-ffeeddccbbaa",
      "name": "Hit Limit?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.unavailable === true }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        144,
        1048
      ],
      "id": "00112233-4455-6677-8899-aabbccddeeff",
      "name": "Unavailable?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        368,
        1048
      ],
      "id": "ffeeddcc-bbaa-9988-7766-554433221100",
      "name": "Answer Callback (unavailable)"
    },
    {
      "parameters": {
        "jsCode": "const uid = $('Extract User Data').first().json.user_id;\nlet selected = [];\ntry {\n  const rawSel = $('Get Selected Dates').first()?.json?.value;\n  selected = rawSel ? JSON.parse(rawSel) : [];\n} catch(e){ selected = []; }\nlet records = [];\ntry {\n  const rawMeta =\n    $('Fetch Cached Data (for grid)').first()?.json?.value\n    || $('Fetch CSV Meta (calopen)').first()?.json?.value;\n  const meta = rawMeta ? JSON.parse(rawMeta) : {};\n  records = Array.isArray(meta.records) ? meta.records : [];\n} catch(e){ records = []; }\nfunction parseAsMsk(dateStr){\n  if (!dateStr) return null;\n  let d = dateStr;\n  if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(d)) d = d.replace(' ', 'T') + 'Z';\n  const base = new Date(d);\n  if (isNaN(base)) return null;\n  return new Date(base.getTime() + 3*60*60*1000);\n}\nconst setSel = new Set(selected);\nlet totalOrders = 0;\nlet totalRevenue = 0;\nconst revenueStatuses = ['–¥–æ—Å—Ç–∞–≤–ª–µ–Ω','–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è','–æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏','–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫–∏'];\nconst cancelStatuses  = ['–æ—Ç–º–µ–Ω—ë–Ω','–æ—Ç–º–µ–Ω–µ–Ω','–≤–æ–∑–≤—Ä–∞—Ç'];\nfor(const r of records){\n  const msk = parseAsMsk(r.created_at);\n  if(!msk) continue;\n  const d = msk.toISOString().split('T')[0];\n  if(!setSel.has(d)) continue;\n  const q = Number(r.quantity||1);\n  const p = Number(r.price||0);\n  totalOrders += q;\n  if (revenueStatuses.some(s => (r.status||'').includes(s))) {\n    totalRevenue += p*q;\n  }\n}\nreturn [{\n  json: {\n    ...$json,\n    selectedDates: selected,\n    selectionSummary: { totalOrders, totalRevenue }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3760,
        240
      ],
      "id": "compute-selection-summary",
      "name": "Compute Selection Summary"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": {{ JSON.stringify($('Extract User Data').first().json.chat_id) }},\n  \"parse_mode\": \"HTML\",\n  \"text\": \"üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\\n\\n–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç—á—ë—Ç Ozon –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .csv / .xlsx –¥–æ 20MB. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è –æ—Ç–∫—Ä–æ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç.\"\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2060,
        880
      ],
      "id": "send-upload-help",
      "name": "Send Upload Help"
    },
    {
      "parameters": {
        "jsCode": "const uid=$('Extract User Data').first().json.user_id; const chat=$('Extract User Data').first().json.chat_id;\nreturn [{ json: { user_id: uid, chat_id: chat } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        960
      ],
      "id": "clear-cache",
      "name": "Clear Cache"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=ozon:sess:{{ $json.user_id }}:csv"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2580,
        860
      ],
      "id": "del-csv",
      "name": "Del CSV Cache",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=ozon:sess:{{ $json.user_id }}:dates"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2800,
        860
      ],
      "id": "del-selected",
      "name": "Del Selected Dates",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=ozon:ui:{{ $json.user_id }}:calendar_msg_id"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3020,
        860
      ],
      "id": "del-cal-msg",
      "name": "Del Calendar Msg ID",
      "credentials": {
        "redis": {
          "id": "kaA0Glj8bB5pwqRt",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–ö—ç—à –æ—á–∏—â–µ–Ω\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3060,
        620
      ],
      "id": "answer-callback-cleared",
      "name": "Answer Callback (cleared)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": {{ JSON.stringify($('Extract User Data').first().json.chat_id) }},\n  \"parse_mode\": \"HTML\",\n  \"text\": \"‚ôªÔ∏è <b>–ö—ç—à –æ—á–∏—â–µ–Ω.</b>\\n\\n–ù–∞–∂–º–∏—Ç–µ <b>–ó–∞–∫–∞–∑—ã</b> –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\"\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2960,
        960
      ],
      "id": "send-start-prompt",
      "name": "Send Start Prompt"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ Array.isArray($json.selectedDates) && $json.selectedDates.length > 0 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2460,
        700
      ],
      "id": "has-selection",
      "name": "Has Selection?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ !!$json.value }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2960,
        720
      ],
      "id": "has-csv",
      "name": "Has CSV?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á—ë—Ç .csv/.xlsx\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        860
      ],
      "id": "answer-callback-no-file",
      "name": "Answer Callback (no-file)"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Validate Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Config": {
      "main": [
        [
          {
            "node": "Extract User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract User Data": {
      "main": [
        [
          {
            "node": "Check Whitelist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Whitelist": {
      "main": [
        [
          {
            "node": "Check Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Whitelist": {
      "main": [
        [
          {
            "node": "Is Authorized?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Authorized?": {
      "main": [
        [
          {
            "node": "Route Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Admin": {
      "main": [
        [
          {
            "node": "Validate Whitelist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Message": {
      "main": [
        [
          {
            "node": "Generate Main Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ensure CSV Document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ensure XLSX Document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Selected Dates (toggle)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Calendar Nav",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Selected Dates (Done)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reset Dates",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "Fetch CSV Meta (calopen)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Calendar Msg ID (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Upload Help",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Main Menu": {
      "main": [
        [
          {
            "node": "Prepare Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Menu": {
      "main": [
        [
          {
            "node": "Send Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Menu": {
      "main": [
        [
          {
            "node": "Get CSV Meta (Menu)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Menu Response": {
      "main": [
        [
          {
            "node": "Send Menu Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure CSV Document": {
      "main": [
        [
          {
            "node": "Get File from Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File from Telegram": {
      "main": [
        [
          {
            "node": "Extract from File (CSV)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File (CSV)": {
      "main": [
        [
          {
            "node": "Parse Report File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Report File": {
      "main": [
        [
          {
            "node": "Cache CSV Meta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache CSV Meta": {
      "main": [
        [
          {
            "node": "Calc Initial Month",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calc Initial Month": {
      "main": [
        [
          {
            "node": "Persist Cal Month (initial)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch CSV Meta (for calendar)": {
      "main": [
        []
      ]
    },
    "Get Selected Dates": {
      "main": [
        []
      ]
    },
    "Handle Calendar Nav": {
      "main": [
        [
          {
            "node": "Get Month (Render smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Selected Dates (toggle)": {
      "main": [
        [
          {
            "node": "Toggle Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Toggle Date": {
      "main": [
        [
          {
            "node": "Hit Limit?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unavailable?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Persist Selected Dates": {
      "main": [
        [
          {
            "node": "Fetch Cached Data (for grid)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Cached Data (for grid)": {
      "main": [
        [
          {
            "node": "Get Month (Render smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset Dates": {
      "main": [
        [
          {
            "node": "Persist Selected (Reset)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Persist Selected (Reset)": {
      "main": [
        [
          {
            "node": "Get Month (Render smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Selected Dates (Done)": {
      "main": [
        [
          {
            "node": "Handle Done",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Done": {
      "main": [
        [
          {
            "node": "Has Selection?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cached Data (for stats)": {
      "main": [
        [
          {
            "node": "Has CSV?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Statistics": {
      "main": [
        [
          {
            "node": "Send Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure XLSX Document": {
      "main": [
        [
          {
            "node": "Get XLSX from Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get XLSX from Telegram": {
      "main": [
        [
          {
            "node": "Extract from File (XLSX)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File (XLSX)": {
      "main": [
        [
          {
            "node": "Parse Report File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get CSV Meta (Menu)": {
      "main": [
        [
          {
            "node": "Render Orders Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render Orders Menu": {
      "main": [
        [
          {
            "node": "Prepare Menu Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch CSV Meta (calopen)": {
      "main": [
        [
          {
            "node": "Has File? (calopen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has File? (calopen)": {
      "main": [
        [
          {
            "node": "Calc Initial Month",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Answer Callback (need file)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Calendar Msg ID (clear)": {
      "main": [
        [
          {
            "node": "Has Calendar Msg? (clear)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Calendar Msg? (clear)": {
      "main": [
        [
          {
            "node": "Delete Calendar Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Del csv_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Calendar Message": {
      "main": [
        [
          {
            "node": "Del csv_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Del csv_data": {
      "main": [
        [
          {
            "node": "Del selected_dates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Del selected_dates": {
      "main": [
        [
          {
            "node": "Del calendar_msg_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Del calendar_msg_id": {
      "main": [
        [
          {
            "node": "Answer Callback (cleared)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer Callback (cleared)": {
      "main": [
        [
          {
            "node": "Send Start Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Persist Cal Month (initial)": {
      "main": [
        [
          {
            "node": "Get Month (Render smart)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch CSV Meta (for calendar)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Selected Dates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Month (Render smart)": {
      "main": [
        [
          {
            "node": "Ensure Month (smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure Month (smart)": {
      "main": [
        [
          {
            "node": "Compute Selection Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render Calendar (smart)": {
      "main": [
        [
          {
            "node": "Get Calendar Msg ID (smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Calendar Msg ID (smart)": {
      "main": [
        [
          {
            "node": "Has Calendar Msg? (smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Calendar Msg? (smart)": {
      "main": [
        [
          {
            "node": "Edit Calendar (smart)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Calendar (smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Calendar (smart)": {
      "main": [
        [
          {
            "node": "Persist Calendar Msg ID (smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hit Limit?": {
      "main": [
        [
          {
            "node": "Answer Callback (limit)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Persist Selected Dates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unavailable?": {
      "main": [
        [
          {
            "node": "Answer Callback (unavailable)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Persist Selected Dates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compute Selection Summary": {
      "main": [
        [
          {
            "node": "Render Calendar (smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear Cache": {
      "main": [
        [
          {
            "node": "Del CSV Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Del CSV Cache": {
      "main": [
        [
          {
            "node": "Del Selected Dates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Del Selected Dates": {
      "main": [
        [
          {
            "node": "Del Calendar Msg ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Del Calendar Msg ID": {
      "main": [
        [
          {
            "node": "Answer Callback (cleared)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Selection?": {
      "main": [
        [
          {
            "node": "Answer Callback (needSelect)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Cached Data (for stats)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has CSV?": {
      "main": [
        [
          {
            "node": "Answer Callback (no-file)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Calculate Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Calendar (smart)": {
      "main": [
        [
          {
            "node": "Persist Calendar Msg ID (smart)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2-calendar-grid-aligned",
  "meta": {
    "instanceId": "ozon-bot-instance"
  },
  "tags": []
}
