{
  "name": "Ozon Telegram Bot - Orders Analytics (patched, calendar)",
  "nodes": [
    {
      "parameters": { "updates": ["message", "callback_query"], "additionalFields": { "download": true } },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [100, 100],
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            { "id": "telegram-bot-token-field", "name": "TELEGRAM_BOT_TOKEN", "value": "YOUR_TELEGRAM_BOT_TOKEN_HERE", "type": "string" },
            { "id": "superuser-ids-field", "name": "SUPERUSER_IDS", "value": "user_id_1,user_id_2", "type": "string" }
          ]
        },
        "includeOtherFields": true
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [320, 100],
      "id": "config",
      "name": "Config"
    },
    {
      "parameters": {
        "jsCode": "// üîê Validate config\nconst token=$json.TELEGRAM_BOT_TOKEN; const su=$json.SUPERUSER_IDS;\nif(!token||token==='YOUR_TELEGRAM_BOT_TOKEN_HERE') throw new Error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');\nif(!su||su.trim()===''||su==='user_id_1,user_id_2') throw new Error('‚ùå SUPERUSER_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');\nreturn { json:$json, binary:$binary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [540, 100],
      "id": "validate-config",
      "name": "Validate Config"
    },
    {
      "parameters": {
        "jsCode": "// Extract user/callback\nconst t=$('Telegram Trigger').first().json; const m=t.message; const c=t.callback_query;\nconst userId=m?.from?.id||c?.from?.id; const chatId=m?.chat?.id||c?.message?.chat?.id;\nreturn { json: { ...$json, user_id:String(userId), chat_id:String(chatId), message_text:m?.text||'', callback_data:c?.data||'', callback_query_id:c?.id||'', document:m?.document||null }, binary:$binary };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [760, 100],
      "id": "extract-user",
      "name": "Extract User Data"
    },
    {
      "parameters": { "operation": "get", "key": "=ozon:acl:whitelist:{{ $json.user_id }}", "propertyName": "value" },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [980, 100],
      "id": "check-whitelist",
      "name": "Check Whitelist",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "jsCode": "// access\nconst w=$json.value; const uid=$('Extract User Data').first().json.user_id; const su=$('Config').first().json.SUPERUSER_IDS||'';\nconst suIds=su.split(',').map(s=>s.trim()).filter(Boolean); const isSu=suIds.includes(uid); const isAdmin=w==='1';\nif(!isSu&&!isAdmin) throw new Error('‚õî Access denied');\nreturn { json:{ ...$('Extract User Data').first().json, is_superuser:isSu, is_admin:isAdmin, redis_value:w } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 100],
      "id": "validate-whitelist",
      "name": "Validate Whitelist"
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 },
          "conditions": [
            { "id": "ok", "leftValue": "={{ $json.is_superuser === true || $json.is_admin === true }}", "rightValue": "true", "operator": { "type": "boolean", "operation": "true", "singleValue": true } }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1420, 100],
      "id": "is-authorized",
      "name": "Is Authorized?"
    },
    {
      "parameters": {
        "chatId": "={{ $('Extract User Data').first().json.chat_id }}",
        "text": "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "additionalFields": { "appendAttribution": false, "parse_mode": "HTML" }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1420, 260],
      "id": "unauth",
      "name": "Unauthorized Response",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },
    {
      "parameters": { "operation": "get", "key": "=ozon:acl:admins:{{ $('Extract User Data').first().json.user_id }}", "propertyName": "value" },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1640, 100],
      "id": "check-admin",
      "name": "Check Admin",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            { "outputKey": "Start", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.message_text }}", "rightValue": "/start", "operator": { "type": "string", "operation": "equals" } }], "combinator": "and" } },
            { "outputKey": "CSV", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [
              { "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}", "rightValue": "text/csv", "operator": { "type": "string", "operation": "equals" } },
              { "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}", "rightValue": "application/vnd.ms-excel", "operator": { "type": "string", "operation": "equals" } },
              { "leftValue": "={{ $('Extract User Data').first().json.document?.file_name }}", "rightValue": ".csv", "operator": { "type": "string", "operation": "endsWith" } }
            ], "combinator": "or" } },
            { "outputKey": "XLSX", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [
              { "leftValue": "={{ $('Extract User Data').first().json.document?.mime_type }}", "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "operator": { "type": "string", "operation": "equals" } },
              { "leftValue": "={{ $('Extract User Data').first().json.document?.file_name }}", "rightValue": ".xlsx", "operator": { "type": "string", "operation": "endsWith" } }
            ], "combinator": "or" } },
            { "outputKey": "Menu", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "menu:", "operator": { "type": "string", "operation": "startsWith" } }], "combinator": "and" } },
            { "outputKey": "DateSelection", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "date:", "operator": { "type": "string", "operation": "startsWith" } }], "combinator": "and" } },
            { "outputKey": "CalNav", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [
              { "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "calnav:", "operator": { "type": "string", "operation": "startsWith" } },
              { "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "cal:", "operator": { "type": "string", "operation": "startsWith" } }
            ], "combinator": "or" } },
            { "outputKey": "DatesDone", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "dates:done", "operator": { "type": "string", "operation": "equals" } }], "combinator": "and" } },
            { "outputKey": "DatesReset", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "dates:reset", "operator": { "type": "string", "operation": "equals" } }], "combinator": "and" } },
            { "outputKey": "Noop", "conditions": { "options": { "caseSensitive": true, "typeValidation": "strict", "version": 2 }, "conditions": [{ "leftValue": "={{ $('Extract User Data').first().json.callback_data }}", "rightValue": "noop", "operator": { "type": "string", "operation": "equals" } }], "combinator": "and" } }
          ]
        },
        "options": { "fallbackOutput": "none" }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [1860, 100],
      "id": "route",
      "name": "Route Message"
    },
    {
      "parameters": {
        "jsCode": "const chatId=$('Extract User Data').first().json.chat_id; const isAdmin=$('Check Admin').first().json.value==='1';\nconst kb={ inline_keyboard:[[ {text:'üì¶ –ó–∞–∫–∞–∑—ã',callback_data:'menu:orders'} ],[ {text:'üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã',callback_data:'menu:clusters'} ]]}; if(isAdmin) kb.inline_keyboard.push([{text:'‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞',callback_data:'menu:admin'}]);\nreturn [{ json:{ chat_id:chatId, text:'ü§ñ <b>Ozon Analytics Bot</b>\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup:kb } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 40],
      "id": "gen-menu",
      "name": "Generate Main Menu"
    },
    {
      "parameters": {
        "jsCode": "const chatId=$('Extract User Data').first().json.chat_id; const cb=$('Extract User Data').first().json.callback_data; const isAdmin=$('Check Admin').first().json.value==='1';\nconst action=cb.replace('menu:',''); let text=''; let kb={ inline_keyboard:[[ {text:'¬´ –ù–∞–∑–∞–¥',callback_data:'/start'} ]] };\nif(action==='orders'){ text='üì¶ <b>–†–∞–∑–¥–µ–ª: –ó–∞–∫–∞–∑—ã</b>\\n\\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á—ë—Ç .csv/.xlsx (–¥–æ 20MB)'; }\nelse if(action==='clusters'){ text='üéØ <b>–†–∞–∑–¥–µ–ª: –ö–ª–∞—Å—Ç–µ—Ä—ã</b>\\n\\nüöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'; }\nelse if(action==='admin'&&isAdmin){ text='‚öôÔ∏è <b>–ê–¥–º–∏–Ω–∫–∞</b>\\n\\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:'; kb={ inline_keyboard:[[ {text:'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',callback_data:'admin:users'} ],[ {text:'¬´ –ù–∞–∑–∞–¥',callback_data:'/start'} ]]}; }\nreturn [{ json:{ chat_id:chatId, text, reply_markup:kb } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 160],
      "id": "handle-menu",
      "name": "Handle Menu"
    },
    {
      "parameters": {
        "jsCode": "const d=$('Extract User Data').first().json.document||{}; const name=(d.file_name||'').toLowerCase(); const mime=(d.mime_type||'').toLowerCase();\nconst isCsv=mime==='text/csv'||mime==='application/vnd.ms-excel'||name.endsWith('.csv'); if(!d.file_id||!isCsv) return []; return [{ json:$json }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 240],
      "id": "ensure-csv",
      "name": "Ensure Document (CSV)"
    },
    {
      "parameters": { "resource": "file", "fileId": "={{ $('Extract User Data').first().json.document.file_id }}", "additionalFields": { "download": true } },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2300, 240],
      "id": "dl-csv",
      "name": "Get File from Telegram",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },
    {
      "parameters": { "operation": "csv", "options": { "delimiter": ";", "relaxQuotes": true } },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [2520, 240],
      "id": "extract-csv",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "function parseAsMsk(s){ if(!s) return null; let d=s; if(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(d)) d=d.replace(' ','T')+'Z'; const base=new Date(d); if(isNaN(base)) return null; return new Date(base.getTime()+3*60*60*1000); }\nconst raw=$input.all().map(i=>i.json.row??i.json).filter(Boolean); if(!raw.length) throw new Error('Extract from File –ø—É—Å—Ç');\nconst RE_BOM=/^\\uFEFF/; const RE_NBSP=/\\u00A0/g; const RE_Q=/^\"+|\"+$/g; const RE_MS=/\\s+/g;\nconst ck=k=>String(k??'').replace(RE_BOM,'').replace(RE_NBSP,' ').replace(RE_Q,'').trim().replace(RE_MS,' ');\nconst cv=v=>String(v??'').replace(RE_BOM,'').trim(); const num=(v,f=0)=>{ const n=Number(String(v??'').replace(/\\s/g,'').replace(',','.')); return Number.isFinite(n)?n:f; };\nconst rows=raw.map(r=>{ const o={}; for(const k of Object.keys(r)) o[ck(k)]=cv(r[k]); return o; });\nconst keys=Array.from(new Set(Object.keys(rows[0]||{}))).map(k=>k.toLowerCase()); const has=f=>keys.some(k=>k.includes(f));\nconst type=(has('—Å–ø–æ—Å–æ–± –æ—Ç–≥—Ä—É–∑–∫–∏')||has('–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫')||has('–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞')||has('–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏'))&&! (has('—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ')||has('–æ—Ü–µ–Ω–∫–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')||has('–ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É')||has('–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')) ? 'FBS':'FBO';\nconst pick=(rec,cands,fb='')=>{ for(const n of cands){ const c=ck(n); if(rec[c]!=null && String(rec[c]).trim()!=='') return rec[c]; } const rk=Object.keys(rec); for(const n of cands){ const cl=ck(n).toLowerCase(); const f=rk.find(k=>k.toLowerCase()===cl); if(f && String(rec[f]).trim()!=='') return rec[f]; } return fb; };\nconst out=[]; for(const r of rows){ let order_id,sku,quantity,price,created_at,status; if(type==='FBO'){ order_id=pick(r,['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']); sku=pick(r,['–ê—Ä—Ç–∏–∫—É–ª','OZON id','OZON ID']); quantity=num(pick(r,['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],1),1); price=num(pick(r,['–í–∞—à–∞ —Ü–µ–Ω–∞','–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],0),0); created_at=pick(r,['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É']); status=pick(r,['–°—Ç–∞—Ç—É—Å'],''); } else { order_id=pick(r,['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞','‚Ññ –∑–∞–∫–∞–∑–∞']); sku=pick(r,['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞','–ê—Ä—Ç–∏–∫—É–ª','OZON id','OZON ID']); quantity=num(pick(r,['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–ö–æ–ª-–≤–æ'],1),1); price=num(pick(r,['–í–∞—à–∞ —Ü–µ–Ω–∞','–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],0),0); created_at=pick(r,['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏','–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏']); status=pick(r,['–°—Ç–∞—Ç—É—Å'],''); } if(!order_id||!sku) continue; out.push({ order_id:cv(order_id), sku:cv(sku), quantity, price, created_at:cv(created_at), status:String(status||'').toLowerCase() }); }\nconst set=new Set(); for(const r of out){ const d=parseAsMsk(r.created_at); if(!d) continue; set.add(d.toISOString().split('T')[0]); }\nconst availableDates=Array.from(set).sort(); return [{ json:{ reportType:type, records:out, availableDates, totalRecords:out.length, chat_id:$('Extract User Data').first().json.chat_id, user_id:$('Extract User Data').first().json.user_id } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2740, 240],
      "id": "parse-report",
      "name": "Parse Report File"
    },
    {
      "parameters": { "operation": "set", "key": "=ozon:cache:{{ $json.user_id }}:csv_data", "value": "={{ JSON.stringify({ reportType: $json.reportType, records: $json.records, availableDates: $json.availableDates, totalRecords: $json.totalRecords }) }}", "options": { "ttl": 3600 } },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2960, 240],
      "id": "cache-csv",
      "name": "Cache CSV Meta",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "jsCode": "// pick initial month from availableDates[0]\nconst chat=$json.chat_id; const user=$json.user_id; const dates=$json.availableDates||[]; const m=(dates[0]||'').slice(0,7);\nreturn [{ json:{ chat_id:chat, user_id:user, cal_month:m||new Date().toISOString().slice(0,7) } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3180, 240],
      "id": "calc-initial-month",
      "name": "Calc Initial Month"
    },
    {
      "parameters": { "operation": "set", "key": "=ozon:cache:{{ $json.user_id }}:cal_month", "value": "={{ $json.cal_month }}", "options": { "ttl": 3600 } },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [3400, 240],
      "id": "persist-month",
      "name": "Persist Cal Month",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": { "operation": "get", "key": "=ozon:cache:{{ $json.user_id }}:selected_dates", "propertyName": "value" },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2080, 620],
      "id": "get-selected",
      "name": "Get Selected Dates",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": { "operation": "get", "key": "=ozon:cache:{{ $json.user_id }}:csv_data", "propertyName": "value" },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [3620, 240],
      "id": "refetch-csv-for-cal",
      "name": "Fetch CSV Meta (for calendar)",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:cache:{{ $('Extract User Data').first().json.user_id }}:cal_month",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1840, 520],
      "id": "get-month",
      "name": "Get Current Month",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "jsCode": "// Handle calnav:* or cal:YYYY-MM\nconst cb=$('Extract User Data').first().json.callback_data;\nfunction addMonths(ym,delta){ const [y,m]=ym.split('-').map(n=>+n); const d=new Date(y,m-1,1); d.setMonth(d.getMonth()+delta); const yy=d.getFullYear(); const mm=String(d.getMonth()+1).padStart(2,'0'); return `${yy}-${mm}`; }\nlet next=$('Get Current Month').first().json.value||new Date().toISOString().slice(0,7);\nif(cb.startsWith('calnav:')){ const dir=cb.split(':')[1]; next=dir==='next'?addMonths(next,1):addMonths(next,-1); }\nif(cb.startsWith('cal:')){ next=cb.split(':')[1]; }\nreturn [{ json:{ user_id:$('Extract User Data').first().json.user_id, chat_id:$('Extract User Data').first().json.chat_id, cal_month:next } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2060, 520],
      "id": "handle-calnav",
      "name": "Handle Calendar Nav"
    },
    {
      "parameters": { "operation": "set", "key": "=ozon:cache:{{ $json.user_id }}:cal_month", "value": "={{ $json.cal_month }}", "options": { "ttl": 3600 } },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2280, 520],
      "id": "persist-month-on-nav",
      "name": "Persist Month (Nav)",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": { "operation": "get", "key": "=ozon:cache:{{ $json.user_id }}:csv_data", "propertyName": "value" },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2500, 520],
      "id": "fetch-csv-for-nav",
      "name": "Fetch CSV (Nav)",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "jsCode": "function monthName(ym){ const [y,m]=ym.split('-').map(n=>+n); return new Date(y,m-1,1).toLocaleString('ru-RU',{month:'long',year:'numeric'}); }\nfunction buildCalendarGrid(ym){ const [y,m]=ym.split('-').map(n=>+n); const first=new Date(y,m-1,1); const dow=(first.getDay()+6)%7; // Mon=0\n const days=new Date(y,m,0).getDate(); const grid=[]; let week=new Array(7).fill(null); let day=1;\n for(let i=0;i<dow;i++) week[i]=null; for(let i=dow;i<7;i++){ week[i]=day++; } grid.push(week);\n while(day<=days){ week=new Array(7).fill(null); for(let i=0;i<7&&day<=days;i++){ week[i]=day++; } grid.push(week); }\n while(grid.length<6) grid.push(new Array(7).fill(null)); return grid; }\nfunction ymOf(dateStr){ return dateStr.slice(0,7); }\nlet available=[]; try{ const raw=$('Fetch CSV Meta (for calendar)').first().json.value; const obj=raw?JSON.parse(raw):{}; available=Array.isArray(obj.availableDates)?obj.availableDates:[]; }catch(e){ available=[]; }\nlet selected=[]; try{ const raw=$('Get Selected Dates').first().json.value; selected=raw?JSON.parse(raw):[]; }catch(e){ selected=[]; }\nconst ym=$json.cal_month; const grid=buildCalendarGrid(ym); const chat=$('Extract User Data').first().json.chat_id; const header=[{ text:'‚óÄ', callback_data:'calnav:prev' },{ text: monthName(ym).replace(/^./,c=>c.toUpperCase()), callback_data:'noop' },{ text:'‚ñ∂', callback_data:'calnav:next' }];\nconst weekdays=['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'].map(w=>({text:w,callback_data:'noop'}));\nconst rows=[header,weekdays];\nfor(const w of grid){ const r=[]; for(let i=0;i<7;i++){ const d=w[i]; if(!d){ r.push({ text:' ', callback_data:'noop' }); continue; } const day=String(d).padStart(2,'0'); const full=`${ym}-${day}`; const isAvail=available.includes(full); const isSel=selected.includes(full);\n const label=(isSel?'‚òë ':'')+day; r.push({ text: isAvail?label:'¬∑', callback_data: isAvail?`date:${full}`:'noop' }); }\n rows.push(r); }\nconst controls=[]; if(selected.length>0){ controls.push({ text:'‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data:'dates:done' }); } else { controls.push({ text:'üîí –ì–æ—Ç–æ–≤–æ', callback_data:'noop' }); } controls.push({ text:'üóë –°–±—Ä–æ—Å', callback_data:'dates:reset' });\nrows.push(controls);\nconst selectedLine=selected.length?`–í—ã–±—Ä–∞–Ω–æ: ${selected.join(', ')}`:'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 –¥–∞—Ç:';\nreturn [{ json:{ chat_id:chat, text:`üìÖ –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –¥–∞—Ç\\n\\n${selectedLine}`, reply_markup:{ inline_keyboard:rows } } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3840, 240],
      "id": "render-calendar",
      "name": "Render Calendar Grid"
    },
    {
      "parameters": { "method": "POST", "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage", "sendBody": true, "specifyBody": "json", "jsonBody": "={{ JSON.stringify($json) }}" },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [4060, 240],
      "id": "send-calendar",
      "name": "Send Calendar"
    },
    {
      "parameters": {
        "jsCode": "const dateStr=$('Extract User Data').first().json.callback_data.replace('date:',''); const uid=$('Extract User Data').first().json.user_id; let selected=[]; try{ const raw=$('Get Selected Dates').first().json.value; selected=raw?JSON.parse(raw):[]; }catch(e){ selected=[]; }\nconst MAX=3; if(selected.includes(dateStr)){ selected=selected.filter(d=>d!==dateStr); return [{ json:{ user_id:uid, selectedDates:selected, hitLimit:false } }]; }\nif(selected.length>=MAX){ return [{ json:{ user_id:uid, selectedDates:selected, hitLimit:true } }]; }\nselected.push(dateStr); return [{ json:{ user_id:uid, selectedDates:selected, hitLimit:false } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2720, 620],
      "id": "toggle-date",
      "name": "Toggle Date"
    },
    {
      "parameters": { "operation": "set", "key": "=ozon:cache:{{ $json.user_id }}:selected_dates", "value": "={{ JSON.stringify($json.selectedDates || []) }}", "options": { "ttl": 3600 } },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2940, 620],
      "id": "persist-selected",
      "name": "Persist Selected Dates",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": { "operation": "get", "key": "=ozon:cache:{{ $json.user_id }}:csv_data", "propertyName": "value" },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [3160, 620],
      "id": "fetch-csv-for-render",
      "name": "Fetch CSV (Render)",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=ozon:cache:{{ $json.user_id }}:cal_month",
        "propertyName": "value"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [3380, 620],
      "id": "get-month-for-render",
      "name": "Get Month (Render)",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "jsCode": "let m=$json.cal_month; if(!m){ m=$('Get Month (Render)').first().json.value || new Date().toISOString().slice(0,7); }\nreturn [{ json:{ cal_month:m } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3600, 620],
      "id": "ensure-month",
      "name": "Ensure Month For Render"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –¥–∞—Ç\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2940, 720],
      "id": "cb-limit",
      "name": "Answer Callback (limit)"
    },
    {
      "parameters": { "jsCode": "return [{ json:{ selectedDates:[], user_id:$('Extract User Data').first().json.user_id } }];" },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2060, 820],
      "id": "reset-dates",
      "name": "Reset Dates"
    },
    {
      "parameters": { "operation": "set", "key": "=ozon:cache:{{ $json.user_id }}:selected_dates", "value": "={{ JSON.stringify($json.selectedDates || []) }}", "options": { "ttl": 3600 } },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2280, 820],
      "id": "persist-reset",
      "name": "Persist Selected (Reset)",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "jsCode": "const uid=$('Extract User Data').first().json.user_id; let selected=[]; try{ const raw=$('Get Selected Dates').first().json.value; selected=raw?JSON.parse(raw):[]; }catch(e){ selected=[]; } if(!selected.length) return [{ json:{ needSelect:true } }];\nreturn [{ json:{ selectedDates:selected, user_id:uid, chat_id:$('Extract User Data').first().json.chat_id, startTime:'00:00', endTime:'23:59' } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2500, 820],
      "id": "handle-done",
      "name": "Handle Done"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/answerCallbackQuery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"callback_query_id\": {{ JSON.stringify($('Extract User Data').first().json.callback_query_id) }},\n  \"text\": \"–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É\",\n  \"show_alert\": false\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2720, 820],
      "id": "cb-need-select",
      "name": "Answer Callback (needSelect)"
    },
    {
      "parameters": { "operation": "get", "key": "=ozon:cache:{{ $json.user_id }}:csv_data", "propertyName": "value" },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2940, 820],
      "id": "get-csv-for-stats",
      "name": "Get Cached Data (for stats)",
      "credentials": { "redis": { "id": "kaA0Glj8bB5pwqRt", "name": "Redis account" } }
    },
    {
      "parameters": {
        "jsCode": "function parseAsMsk(s){ if(!s) return null; let d=s; if(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(d)) d=d.replace(' ','T')+'Z'; const base=new Date(d); if(isNaN(base)) return null; return new Date(base.getTime()+3*60*60*1000); }\nfunction filter(records,datesOrOne,st,en){ const dates=Array.isArray(datesOrOne)?datesOrOne:[datesOrOne]; const set=new Set(dates.filter(Boolean)); return records.filter(r=>{ const dt=parseAsMsk(r.created_at); if(!dt) return false; const d=dt.toISOString().split('T')[0]; if(!set.has(d)) return false; const t=dt.toTimeString().slice(0,5); return t>=st && t<=en; }); }\nfunction calc(records,datesOrOne,st,en){ const arr=filter(records,datesOrOne,st,en); if(!arr.length) return { date:datesOrOne,startTime:st,endTime:en,totalOrders:0,totalCancellations:0,totalRevenue:0,skuStats:{},message:'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥' };\n const rev=['–¥–æ—Å—Ç–∞–≤–ª–µ–Ω','–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è','–æ–∂–∏–¥–∞–µ—Ç —Å–±–æ—Ä–∫–∏','–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫–∏']; const canc=['–æ—Ç–º–µ–Ω—ë–Ω','–æ—Ç–º–µ–Ω–µ–Ω','–≤–æ–∑–≤—Ä–∞—Ç']; const by={};\n for(const r of arr){ const sku=r.sku; const status=r.status||''; const q=r.quantity||1; const p=r.price||0; by[sku] ||= { totalOrders:0,cancellations:0,totalRevenue:0,weightedPriceSum:0,weightedQuantitySum:0,avgPrice:0 }; const s=by[sku]; s.totalOrders+=q; if(canc.some(x=>status.includes(x))) s.cancellations+=q; if(rev.some(x=>status.includes(x))){ s.totalRevenue+=p*q; s.weightedPriceSum+=p*q; s.weightedQuantitySum+=q; } }\n for(const k of Object.keys(by)){ const s=by[k]; if(s.weightedQuantitySum>0) s.avgPrice=s.weightedPriceSum/s.weightedQuantitySum; }\n let totO=0, totC=0, totR=0; for(const s of Object.values(by)){ totO+=s.totalOrders; totC+=s.cancellations; totR+=s.totalRevenue; }\n return { date:datesOrOne,startTime:st,endTime:en,totalOrders:totO,totalCancellations:totC,totalRevenue:totR,skuStats:by }; }\nfunction fmt(st){ let msg='üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\\n\\n'; const label=Array.isArray(st.date)?st.date.join(', '):st.date; msg+=`üìÖ –î–∞—Ç—ã: ${label}\\n`; msg+=`‚è∞ –í—Ä–µ–º—è: ${st.startTime} - ${st.endTime}\\n\\n`; if(st.totalOrders===0){ msg+=st.message||'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; return msg; } const skus=Object.keys(st.skuStats).sort(); for(const sku of skus){ const s=st.skuStats[sku]; msg+=`<b>${sku}</b>\\n  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${s.totalOrders}\\n  ‚Ä¢ –û—Ç–º–µ–Ω: ${s.cancellations}\\n  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${s.avgPrice.toFixed(2)} ‚ÇΩ\\n  ‚Ä¢ –°—É–º–º–∞: ${s.totalRevenue.toFixed(2)} ‚ÇΩ\\n\\n`; } msg+=`<b>–ò–¢–û–ì–û:</b>\\n  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${st.totalOrders}\\n  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ–Ω: ${st.totalCancellations}\\n  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${st.totalRevenue.toFixed(2)} ‚ÇΩ`; return msg; }\n// inputs\nlet meta={}; try{ meta=JSON.parse($('Get Cached Data (for stats)').first().json.value||'{}'); }catch(e){ meta={}; }\nconst datesOrOne=$json.selectedDates && $json.selectedDates.length ? $json.selectedDates : (meta.availableDates||[])[0];\nconst st=$json.startTime||'00:00'; const en=$json.endTime||'23:59'; const stats=calc(meta.records||[], datesOrOne, st, en); const text=fmt(stats);\nreturn [{ json:{ chat_id:$('Extract User Data').first().json.chat_id, text, stats } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3160, 820],
      "id": "calc-stats",
      "name": "Calculate Statistics"
    },
    {
      "parameters": { "chatId": "={{ $json.chat_id }}", "text": "={{ $json.text }}", "additionalFields": { "parse_mode": "HTML", "appendAttribution": false } },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [3380, 820],
      "id": "send-stats",
      "name": "Send Statistics",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },
    {
      "parameters": { "jsCode": "const i=$json; const kb=i.reply_markup?.inline_keyboard||[]; return [{ json:{ chat_id:i.chat_id, text:i.text, parse_mode:'HTML', reply_markup:{ inline_keyboard:kb } } }];" },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2300, 40],
      "id": "prep-menu",
      "name": "Prepare Menu"
    },
    {
      "parameters": { "method": "POST", "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage", "sendBody": true, "specifyBody": "json", "jsonBody": "={{ JSON.stringify($json) }}" },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2520, 40],
      "id": "send-menu",
      "name": "Send Menu"
    },
    {
      "parameters": { "jsCode": "const i=$json; const kb=i.reply_markup?.inline_keyboard||[]; return [{ json:{ chat_id:i.chat_id, text:i.text, parse_mode:'HTML', reply_markup:{ inline_keyboard:kb } } }];" },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2300, 160],
      "id": "prep-menu-resp",
      "name": "Prepare Menu Response"
    },
    {
      "parameters": { "method": "POST", "url": "=https://api.telegram.org/bot{{ $('Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage", "sendBody": true, "specifyBody": "json", "jsonBody": "={{ JSON.stringify($json) }}" },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2520, 160],
      "id": "send-menu-resp",
      "name": "Send Menu Response"
    },
    {
      "parameters": {
        "jsCode": "const d=$('Extract User Data').first().json.document||{}; const name=(d.file_name||'').toLowerCase(); const mime=(d.mime_type||'').toLowerCase(); const isXlsx=mime==='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'||name.endsWith('.xlsx'); if(!d.file_id||!isXlsx) return []; return [{ json:$json }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2080, 300],
      "id": "ensure-xlsx",
      "name": "Ensure Document (XLSX)"
    },
    {
      "parameters": { "resource": "file", "fileId": "={{ $('Extract User Data').first().json.document.file_id }}", "additionalFields": { "download": true } },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2300, 300],
      "id": "dl-xlsx",
      "name": "Get XLSX from Telegram",
      "credentials": { "telegramApi": { "id": "p4dTUZho7h1VsmzM", "name": "Tg Ozon.Orders bot" } }
    },
    {
      "parameters": { "operation": "xlsx" },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [2520, 300],
      "id": "extract-xlsx",
      "name": "Extract from File (XLSX)"
    }
  ],
  "connections": {
    "telegram-trigger": { "main": [[{ "node": "config", "type": "main", "index": 0 }]] },
    "config": { "main": [[{ "node": "validate-config", "type": "main", "index": 0 }]] },
    "validate-config": { "main": [[{ "node": "extract-user", "type": "main", "index": 0 }]] },
    "extract-user": { "main": [[{ "node": "check-whitelist", "type": "main", "index": 0 }]] },
    "check-whitelist": { "main": [[{ "node": "validate-whitelist", "type": "main", "index": 0 }]] },
    "validate-whitelist": { "main": [[{ "node": "is-authorized", "type": "main", "index": 0 }]] },
    "is-authorized": {
      "main": [
        [{ "node": "check-admin", "type": "main", "index": 0 }],
        [{ "node": "unauth", "type": "main", "index": 0 }]
      ]
    },
    "check-admin": { "main": [[{ "node": "route", "type": "main", "index": 0 }]] },
    "route": {
      "main": [
        [{ "node": "gen-menu", "type": "main", "index": 0 }],
        [{ "node": "ensure-csv", "type": "main", "index": 0 }],
        [{ "node": "ensure-xlsx", "type": "main", "index": 0 }],
        [{ "node": "handle-menu", "type": "main", "index": 0 }],
        [{ "node": "toggle-date", "type": "main", "index": 0 }],
        [{ "node": "get-month", "type": "main", "index": 0 }],
        [{ "node": "handle-done", "type": "main", "index": 0 }],
        [{ "node": "reset-dates", "type": "main", "index": 0 }],
        []
      ]
    },
    "gen-menu": { "main": [[{ "node": "prep-menu", "type": "main", "index": 0 }]] },
    "prep-menu": { "main": [[{ "node": "send-menu", "type": "main", "index": 0 }]] },
    "handle-menu": { "main": [[{ "node": "prep-menu-resp", "type": "main", "index": 0 }]] },
    "prep-menu-resp": { "main": [[{ "node": "send-menu-resp", "type": "main", "index": 0 }]] },
    "ensure-csv": { "main": [[{ "node": "dl-csv", "type": "main", "index": 0 }]] },
    "dl-csv": { "main": [[{ "node": "extract-csv", "type": "main", "index": 0 }]] },
    "extract-csv": { "main": [[{ "node": "parse-report", "type": "main", "index": 0 }]] },
    "parse-report": { "main": [[{ "node": "cache-csv", "type": "main", "index": 0 }]] },
    "cache-csv": { "main": [[{ "node": "calc-initial-month", "type": "main", "index": 0 }]] },
    "calc-initial-month": { "main": [[{ "node": "persist-month", "type": "main", "index": 0 }]] },
    "persist-month": { "main": [[{ "node": "refetch-csv-for-cal", "type": "main", "index": 0 }]] },
    "refetch-csv-for-cal": { "main": [[{ "node": "get-selected", "type": "main", "index": 0 }]] },
    "get-selected": { "main": [[{ "node": "render-calendar", "type": "main", "index": 0 }]] },
    "render-calendar": { "main": [[{ "node": "send-calendar", "type": "main", "index": 0 }]] },
    "ensure-xlsx": { "main": [[{ "node": "dl-xlsx", "type": "main", "index": 0 }]] },
    "dl-xlsx": { "main": [[{ "node": "extract-xlsx", "type": "main", "index": 0 }]] },
    "extract-xlsx": { "main": [[{ "node": "parse-report", "type": "main", "index": 0 }]] },
    "get-month": { "main": [[{ "node": "handle-calnav", "type": "main", "index": 0 }]] },
    "handle-calnav": { "main": [[{ "node": "persist-month-on-nav", "type": "main", "index": 0 }]] },
    "persist-month-on-nav": { "main": [[{ "node": "fetch-csv-for-nav", "type": "main", "index": 0 }]] },
    "fetch-csv-for-nav": { "main": [[{ "node": "get-selected", "type": "main", "index": 0 }]] },
    "toggle-date": { "main": [[{ "node": "persist-selected", "type": "main", "index": 0 }]] },
    "persist-selected": { "main": [[{ "node": "fetch-csv-for-render", "type": "main", "index": 0 }]] },
    "fetch-csv-for-render": { "main": [[{ "node": "get-month-for-render", "type": "main", "index": 0 }]] },
    "get-month-for-render": { "main": [[{ "node": "ensure-month", "type": "main", "index": 0 }]] },
    "ensure-month": { "main": [[{ "node": "render-calendar", "type": "main", "index": 0 }]] },
    "cb-limit": { "main": [] },
    "reset-dates": { "main": [[{ "node": "persist-reset", "type": "main", "index": 0 }]] },
    "persist-reset": { "main": [[{ "node": "refetch-csv-for-cal", "type": "main", "index": 0 }]] },
    "handle-done": { "main": [[{ "node": "cb-need-select", "type": "main", "index": 0 }, { "node": "get-csv-for-stats", "type": "main", "index": 0 }]] },
    "get-csv-for-stats": { "main": [[{ "node": "calc-stats", "type": "main", "index": 0 }]] },
    "calc-stats": { "main": [[{ "node": "send-stats", "type": "main", "index": 0 }]] }
  },
  "pinData": {},
  "active": false,
  "settings": { "executionOrder": "v1" },
  "versionId": "2-calendar-grid",
  "meta": { "instanceId": "ozon-bot-instance" },
  "tags": []
}
