{
  "name": "Ozon Telegram Bot - Orders Analytics",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram-webhook",
        "responseMode": "responseNode"
      },
      "name": "Telegram Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract user data from Telegram webhook\nconst body = $input.item.json.body;\n\n// Handle both message and callback_query\nconst message = body.message || body.callback_query?.message;\nconst from = body.message?.from || body.callback_query?.from;\n\nconst userId = from?.id;\nconst chatId = message?.chat?.id || body.callback_query?.message?.chat?.id;\nconst username = from?.username || from?.first_name || 'Unknown';\nconst messageText = body.message?.text || '';\nconst callbackData = body.callback_query?.data || '';\nconst document = body.message?.document || null;\n\nreturn [{\n  json: {\n    user_id: userId,\n    chat_id: chatId,\n    username: username,\n    message_text: messageText,\n    callback_data: callbackData,\n    document: document,\n    callback_query_id: body.callback_query?.id,\n    raw_body: body\n  }\n}];"
      },
      "name": "Extract User Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "sIsMember",
        "key": "ozon:acl:whitelist",
        "member": "={{ $json.user_id }}"
      },
      "name": "Check Whitelist",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.response }}",
              "value2": 1
            }
          ]
        }
      },
      "name": "Is Authorized?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "const chatId = $input.item.json.chat_id;\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    chat_id: chatId,\n    text: '‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.\\n\\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.',\n    parse_mode: 'Markdown'\n  }\n}];"
      },
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 460]
    },
    {
      "parameters": {
        "operation": "sIsMember",
        "key": "ozon:acl:admins",
        "member": "={{ $json.user_id }}"
      },
      "name": "Check Admin",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1120, 140]
    },
    {
      "parameters": {
        "jsCode": "// Route based on message type\nconst messageText = $input.item.json.message_text;\nconst callbackData = $input.item.json.callback_data;\nconst document = $input.item.json.document;\nconst isAdmin = $input.item.json.is_admin || ($input.item.json.response === 1);\n\nlet route = 'unknown';\n\nif (messageText === '/start' || messageText === '/help') {\n  route = 'start';\n} else if (callbackData) {\n  if (callbackData.startsWith('menu:')) {\n    route = 'menu_action';\n  } else if (callbackData.startsWith('date:')) {\n    route = 'date_selection';\n  } else if (callbackData.startsWith('time:')) {\n    route = 'time_selection';\n  } else if (callbackData.startsWith('admin:')) {\n    route = 'admin_action';\n  } else if (callbackData === 'back_to_menu') {\n    route = 'start';\n  }\n} else if (document && document.mime_type === 'text/csv') {\n  route = 'csv_upload';\n} else if (messageText && messageText.length > 0) {\n  route = 'text_message';\n}\n\nreturn [{\n  json: {\n    ...($input.item.json),\n    route: route,\n    is_admin: isAdmin\n  }\n}];"
      },
      "name": "Route Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 140]
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.route }}",
                    "value2": "start"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "start"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.route }}",
                    "value2": "csv_upload"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "csv_upload"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.route }}",
                    "value2": "menu_action"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "menu_action"
            }
          ]
        },
        "fallbackOutput": 3
      },
      "name": "Switch Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [1560, 140]
    },
    {
      "parameters": {
        "jsCode": "// Generate main menu\nconst chatId = $input.item.json.chat_id;\nconst isAdmin = $input.item.json.is_admin;\n\nconst keyboard = {\n  inline_keyboard: [\n    [{text: 'üì¶ –ó–∞–∫–∞–∑—ã', callback_data: 'menu:orders'}],\n    [{text: 'üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã', callback_data: 'menu:clusters'}]\n  ]\n};\n\nif (isAdmin) {\n  keyboard.inline_keyboard.push([{text: '‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞', callback_data: 'menu:admin'}]);\n}\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    chat_id: chatId,\n    text: 'ü§ñ **Ozon Analytics Bot**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',\n    parse_mode: 'Markdown',\n    reply_markup: JSON.stringify(keyboard)\n  }\n}];"
      },
      "name": "Generate Main Menu",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 60]
    },
    {
      "parameters": {
        "jsCode": "// Handle menu actions\nconst callbackData = $input.item.json.callback_data;\nconst chatId = $input.item.json.chat_id;\nconst isAdmin = $input.item.json.is_admin;\n\nconst action = callbackData.replace('menu:', '');\n\nlet text = '';\nlet keyboard = {inline_keyboard: [[{text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu'}]]};\n\nif (action === 'orders') {\n  text = 'üì¶ **–†–∞–∑–¥–µ–ª: –ó–∞–∫–∞–∑—ã**\\n\\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º Ozon (FBO –∏–ª–∏ FBS) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\\n\\n*–§–æ—Ä–º–∞—Ç:* –¥–æ 20MB, .csv —Ñ–∞–π–ª';\n} else if (action === 'clusters') {\n  text = 'üéØ **–†–∞–∑–¥–µ–ª: –ö–ª–∞—Å—Ç–µ—Ä—ã**\\n\\nüöß –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.';\n} else if (action === 'admin' && isAdmin) {\n  text = '‚öôÔ∏è **–ê–¥–º–∏–Ω–∫–∞**\\n\\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É:';\n  keyboard = {\n    inline_keyboard: [\n      [{text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data: 'admin:users'}],\n      [{text: 'üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', callback_data: 'admin:admins'}],\n      [{text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu'}]\n    ]\n  };\n} else {\n  text = '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ';\n}\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    chat_id: chatId,\n    text: text,\n    parse_mode: 'Markdown',\n    reply_markup: JSON.stringify(keyboard)\n  }\n}];"
      },
      "name": "Handle Menu Action",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 240]
    },
    {
      "parameters": {
        "jsCode": "// Validate and download CSV\nconst chatId = $input.item.json.chat_id;\nconst document = $input.item.json.document;\n\nif (!document || document.mime_type !== 'text/csv') {\n  return [{\n    json: {\n      method: 'sendMessage',\n      chat_id: chatId,\n      text: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV'\n    }\n  }];\n}\n\nif (document.file_size > 20 * 1024 * 1024) {\n  return [{\n    json: {\n      method: 'sendMessage',\n      chat_id: chatId,\n      text: '‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB'\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    chat_id: chatId,\n    text: '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é CSV —Ñ–∞–π–ª...\\n\\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.',\n    file_id: document.file_id,\n    file_name: document.file_name\n  }\n}];"
      },
      "name": "Handle CSV Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 420]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/{{ $json.method }}",
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\"ok\": true} }}"
      },
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2220, 300]
    }
  ],
  "connections": {
    "Telegram Webhook": {
      "main": [[{"node": "Extract User Data", "type": "main", "index": 0}]]
    },
    "Extract User Data": {
      "main": [[{"node": "Check Whitelist", "type": "main", "index": 0}]]
    },
    "Check Whitelist": {
      "main": [[{"node": "Is Authorized?", "type": "main", "index": 0}]]
    },
    "Is Authorized?": {
      "main": [
        [{"node": "Check Admin", "type": "main", "index": 0}],
        [{"node": "Unauthorized Response", "type": "main", "index": 0}]
      ]
    },
    "Check Admin": {
      "main": [[{"node": "Route Message", "type": "main", "index": 0}]]
    },
    "Route Message": {
      "main": [[{"node": "Switch Router", "type": "main", "index": 0}]]
    },
    "Switch Router": {
      "main": [
        [{"node": "Generate Main Menu", "type": "main", "index": 0}],
        [{"node": "Handle CSV Upload", "type": "main", "index": 0}],
        [{"node": "Handle Menu Action", "type": "main", "index": 0}],
        [{"node": "Generate Main Menu", "type": "main", "index": 0}]
      ]
    },
    "Generate Main Menu": {
      "main": [[{"node": "Send to Telegram", "type": "main", "index": 0}]]
    },
    "Handle Menu Action": {
      "main": [[{"node": "Send to Telegram", "type": "main", "index": 0}]]
    },
    "Handle CSV Upload": {
      "main": [[{"node": "Send to Telegram", "type": "main", "index": 0}]]
    },
    "Unauthorized Response": {
      "main": [[{"node": "Send to Telegram", "type": "main", "index": 0}]]
    },
    "Send to Telegram": {
      "main": [[{"node": "Respond to Webhook", "type": "main", "index": 0}]]
    }
  },
  "settings": {},
  "staticData": null
}
