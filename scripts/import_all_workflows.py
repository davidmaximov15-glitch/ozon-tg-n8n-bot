#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ ozord_* workflows –≤ n8n —á–µ—Ä–µ–∑ API
"""

import os
import sys
import json
import requests
from pathlib import Path

# n8n API Configuration
N8N_API_KEY = os.getenv('N8N_API_KEY')
N8N_BASE_URL = os.getenv('N8N_BASE_URL', 'https://sirnokoknot.beget.app')

if not N8N_API_KEY:
    print("‚ùå N8N_API_KEY environment variable not set!")
    print("   Set it with: export N8N_API_KEY='your-key-here'")
    sys.exit(1)

API_URL = f"{N8N_BASE_URL}/api/v1"
HEADERS = {
    "X-N8N-API-KEY": N8N_API_KEY,
    "Content-Type": "application/json"
}


def get_existing_workflows():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö workflows"""
    response = requests.get(f"{API_URL}/workflows", headers=HEADERS)
    response.raise_for_status()
    workflows = response.json()["data"]
    return {wf["name"]: wf["id"] for wf in workflows}


def import_workflow(filepath):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å workflow –∏–∑ —Ñ–∞–π–ª–∞"""
    with open(filepath, 'r', encoding='utf-8') as f:
        workflow_data = json.load(f)
    
    # –û—á–∏—â–∞–µ–º read-only –ø–æ–ª—è –¥–ª—è n8n API
    clean_workflow = {
        'name': workflow_data['name'],
        'nodes': workflow_data['nodes'],
        'connections': workflow_data['connections'],
        'settings': workflow_data.get('settings', {})  # settings –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è n8n API
    }
    
    response = requests.post(
        f"{API_URL}/workflows",
        headers=HEADERS,
        json=clean_workflow
    )
    
    if response.status_code in [200, 201]:
        return response.json()["id"]
    else:
        raise Exception(f"Failed to import: {response.text}")


def update_workflow(workflow_id, filepath):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π workflow"""
    with open(filepath, 'r', encoding='utf-8') as f:
        workflow_data = json.load(f)
    
    clean_workflow = {
        'name': workflow_data['name'],
        'nodes': workflow_data['nodes'],
        'connections': workflow_data['connections']
    }
    
    if 'settings' in workflow_data and workflow_data['settings']:
        clean_workflow['settings'] = workflow_data['settings']
    
    response = requests.put(
        f"{API_URL}/workflows/{workflow_id}",
        headers=HEADERS,
        json=clean_workflow
    )
    response.raise_for_status()
    return workflow_id


def activate_workflow(workflow_id):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow"""
    response = requests.post(
        f"{API_URL}/workflows/{workflow_id}/activate",
        headers=HEADERS
    )
    return response.status_code == 200


def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö ozord_* workflows...")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ workflows
    print("üìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ workflows –≤ n8n...")
    existing = get_existing_workflows()
    print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(existing)} workflows")
    ozord_existing = {name: wf_id for name, wf_id in existing.items() if name.startswith('ozord_')}
    if ozord_existing:
        print(f"   –ò–∑ –Ω–∏—Ö ozord_*: {len(ozord_existing)}")
    print()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º workflows
    workflows_dir = Path(__file__).parent.parent / 'workflows'
    workflow_files = sorted(workflows_dir.glob('ozord_*.n8n.json'))
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(workflow_files)} ozord_* —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
    print()
    
    imported = []
    updated = []
    errors = []
    
    for filepath in workflow_files:
        workflow_name = filepath.stem  # –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        
        # –ß–∏—Ç–∞–µ–º name –∏–∑ JSON
        with open(filepath, 'r') as f:
            workflow_data = json.load(f)
            json_name = workflow_data['name']
        
        try:
            if json_name in existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                wf_id = existing[json_name]
                update_workflow(wf_id, filepath)
                updated.append((json_name, wf_id))
                print(f"üîÑ {json_name}")
                print(f"   –û–±–Ω–æ–≤–ª—ë–Ω (ID: {wf_id})")
            else:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                wf_id = import_workflow(filepath)
                imported.append((json_name, wf_id))
                print(f"‚úÖ {json_name}")
                print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (ID: {wf_id})")
            
            print(f"   üîó https://sirnokoknot.beget.app/workflow/{wf_id}")
            print()
        
        except Exception as e:
            errors.append((json_name, str(e)))
            print(f"‚ùå {json_name}")
            print(f"   –û—à–∏–±–∫–∞: {e}")
            print()
    
    # –ò—Ç–æ–≥–∏
    print("="*60)
    print("üìä –ò–¢–û–ì–ò –ò–ú–ü–û–†–¢–ê")
    print("="*60)
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö: {len(imported)}")
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {len(updated)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    print()
    
    if errors:
        print("–û—à–∏–±–∫–∏:")
        for name, error in errors:
            print(f"  - {name}: {error}")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ workflows
    test_dir = workflows_dir / 'tests'
    if test_dir.exists():
        test_files = sorted(test_dir.glob('ozord_test_*.n8n.json'))
        if test_files:
            print(f"üß™ –ù–∞–π–¥–µ–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö workflows")
            print("   –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print("   python3 scripts/import_all_workflows.py --tests")
    
    print("="*60)
    
    return 0 if not errors else 1


if __name__ == "__main__":
    try:
        exit(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(130)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
