#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ end-to-end —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ CSV –¥–∞–Ω–Ω—ã–º–∏.
–≠–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É CSV, –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç, –≤—ã–±–æ—Ä–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤.
"""

import json
import csv
from datetime import datetime, timedelta
from collections import defaultdict

print("=" * 80)
print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
print("=" * 80)

# ============================================================================
# –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –ò –ü–ê–†–°–ò–ù–ì CSV
# ============================================================================
print("\n" + "=" * 80)
print("üìÇ –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –ò –ü–ê–†–°–ò–ù–ì CSV –§–ê–ô–õ–ê (FBO)")
print("=" * 80)

def parse_fbo_date(date_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ FBO: DD.MM.YYYY H:MM"""
    try:
        trimmed = date_str.strip()
        
        # –§–æ—Ä–º–∞—Ç FBO: DD.MM.YYYY H:MM
        parts = trimmed.split(' ')
        if len(parts) != 2:
            return None
            
        date_part = parts[0]  # DD.MM.YYYY
        time_part = parts[1]  # H:MM –∏–ª–∏ HH:MM
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞—Ç—É
        d, m, y = date_part.split('.')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –∫ —á–∞—Å–∞–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(time_part) < 5:
            time_part = '0' + time_part
        
        # –°–æ–∑–¥–∞–µ–º ISO —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∫ UTC
        iso_str = f"{y}-{m}-{d}T{time_part}:00Z"
        utc_date = datetime.fromisoformat(iso_str.replace('Z', '+00:00'))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ MSK (UTC+3)
        msk_date = utc_date + timedelta(hours=3)
        
        return msk_date
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º FBO CSV
csv_file = 'orders-2025-fbo-test.csv'
orders = []
unique_dates = set()

print(f"\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {csv_file}")

with open(csv_file, 'r', encoding='utf-8-sig') as f:
    reader = csv.DictReader(f, delimiter=';')
    
    for row in reader:
        order_date_str = row.get('–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É', '')
        if not order_date_str:
            continue
            
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        order_date = parse_fbo_date(order_date_str)
        if not order_date:
            continue
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        date_only = order_date.date().isoformat()
        unique_dates.add(date_only)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        orders.append({
            'order_id': row.get('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', ''),
            'article': row.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
            'price': row.get('–í–∞—à–∞ —Ü–µ–Ω–∞', ''),
            'quantity': row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ''),
            'status': row.get('–°—Ç–∞—Ç—É—Å', ''),
            'date_str': order_date_str,
            'date_msk': order_date,
            'date_only': date_only
        })

print(f"\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {len(unique_dates)}")

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
sorted_dates = sorted(list(unique_dates))
print(f"\nüìÖ –î–ò–ê–ü–ê–ó–û–ù –î–ê–¢: {sorted_dates[0]} ‚Üí {sorted_dates[-1]}")
print(f"üìÖ –í–°–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –î–ê–¢–´ ({len(sorted_dates)}):")
for date in sorted_dates:
    count = sum(1 for o in orders if o['date_only'] == date)
    print(f"   ‚Ä¢ {date}: {count} –∑–∞–∫–∞–∑–æ–≤")

# ============================================================================
# –®–ê–ì 2: –≠–ú–£–õ–Ø–¶–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø
# ============================================================================
print("\n" + "=" * 80)
print("üìÜ –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ö–ê–õ–ï–ù–î–ê–†–Ø")
print("=" * 80)

print(f"\n‚úÖ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã:")
for date in sorted_dates:
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    dt = datetime.fromisoformat(date)
    formatted = dt.strftime("%d.%m.%Y")
    print(f"   ‚úì {formatted} ({date})")

# ============================================================================
# –®–ê–ì 3: –¢–ï–°–¢ –í–´–ë–û–†–ö–ò 2 –î–ê–¢
# ============================================================================
print("\n" + "=" * 80)
print("üìä –®–ê–ì 3: –¢–ï–°–¢ –í–´–ë–û–†–ö–ò 2 –î–ê–¢")
print("=" * 80)

# –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
if len(sorted_dates) >= 2:
    selected_dates_2 = [sorted_dates[0], sorted_dates[-1]]
    print(f"\nüéØ –í–´–ë–†–ê–ù–ù–´–ï –î–ê–¢–´: {selected_dates_2}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–∞—Ç–∞–º
    filtered_orders_2 = [o for o in orders if o['date_only'] in selected_dates_2]
    
    print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(filtered_orders_2)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    by_date = defaultdict(list)
    for order in filtered_orders_2:
        by_date[order['date_only']].append(order)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_sum = 0
    total_items = 0
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ê–¢–ê–ú:")
    for date in selected_dates_2:
        date_orders = by_date[date]
        date_sum = 0
        date_items = 0
        
        for o in date_orders:
            try:
                price = float(o['price'].replace(',', '.').replace(' ', ''))
                qty = int(o['quantity'])
                date_sum += price * qty
                date_items += qty
            except:
                pass
        
        total_sum += date_sum
        total_items += date_items
        
        print(f"\n   –î–∞—Ç–∞: {date}")
        print(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {len(date_orders)}")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {date_items}")
        print(f"   ‚Ä¢ –°—É–º–º–∞: {date_sum:,.2f} ‚ÇΩ")
    
    print(f"\nüí∞ –ò–¢–û–ì–û –ó–ê 2 –î–ê–¢–´:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(filtered_orders_2)}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}")
    print(f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:,.2f} ‚ÇΩ")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∫–∏ 2 –¥–∞—Ç: PASSED")
else:
    print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∞")

# ============================================================================
# –®–ê–ì 4: –¢–ï–°–¢ –í–´–ë–û–†–ö–ò 3 –î–ê–¢
# ============================================================================
print("\n" + "=" * 80)
print("üìä –®–ê–ì 4: –¢–ï–°–¢ –í–´–ë–û–†–ö–ò 3 –î–ê–¢")
print("=" * 80)

if len(sorted_dates) >= 3:
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é, —Å—Ä–µ–¥–Ω—é—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É
    mid_idx = len(sorted_dates) // 2
    selected_dates_3 = [sorted_dates[0], sorted_dates[mid_idx], sorted_dates[-1]]
    print(f"\nüéØ –í–´–ë–†–ê–ù–ù–´–ï –î–ê–¢–´: {selected_dates_3}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    filtered_orders_3 = [o for o in orders if o['date_only'] in selected_dates_3]
    
    print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(filtered_orders_3)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    by_date = defaultdict(list)
    for order in filtered_orders_3:
        by_date[order['date_only']].append(order)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_sum = 0
    total_items = 0
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ê–¢–ê–ú:")
    for date in selected_dates_3:
        date_orders = by_date[date]
        date_sum = 0
        date_items = 0
        
        for o in date_orders:
            try:
                price = float(o['price'].replace(',', '.').replace(' ', ''))
                qty = int(o['quantity'])
                date_sum += price * qty
                date_items += qty
            except:
                pass
        
        total_sum += date_sum
        total_items += date_items
        
        print(f"\n   –î–∞—Ç–∞: {date}")
        print(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {len(date_orders)}")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {date_items}")
        print(f"   ‚Ä¢ –°—É–º–º–∞: {date_sum:,.2f} ‚ÇΩ")
    
    print(f"\nüí∞ –ò–¢–û–ì–û –ó–ê 3 –î–ê–¢–´:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(filtered_orders_3)}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}")
    print(f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:,.2f} ‚ÇΩ")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∫–∏ 3 –¥–∞—Ç: PASSED")
else:
    print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∞")

# ============================================================================
# –®–ê–ì 5: –¢–ï–°–¢ –í–´–ë–û–†–ö–ò 1 –î–ê–¢–´
# ============================================================================
print("\n" + "=" * 80)
print("üìä –®–ê–ì 5: –¢–ï–°–¢ –í–´–ë–û–†–ö–ò 1 –î–ê–¢–´")
print("=" * 80)

if len(sorted_dates) >= 1:
    # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–∫–∞–∑–æ–≤
    date_counts = {date: sum(1 for o in orders if o['date_only'] == date) for date in sorted_dates}
    selected_date_1 = max(date_counts, key=date_counts.get)
    selected_dates_1 = [selected_date_1]
    
    print(f"\nüéØ –í–´–ë–†–ê–ù–ê –î–ê–¢–ê –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –ó–ê–ö–ê–ó–û–í: {selected_dates_1}")
    print(f"   (—Å–æ–¥–µ—Ä–∂–∏—Ç {date_counts[selected_date_1]} –∑–∞–∫–∞–∑–æ–≤)")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    filtered_orders_1 = [o for o in orders if o['date_only'] in selected_dates_1]
    
    print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(filtered_orders_1)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_sum = 0
    total_items = 0
    
    for o in filtered_orders_1:
        try:
            price = float(o['price'].replace(',', '.').replace(' ', ''))
            qty = int(o['quantity'])
            total_sum += price * qty
            total_items += qty
        except:
            pass
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –î–∞—Ç–∞: {selected_date_1}")
    print(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {len(filtered_orders_1)}")
    print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {total_items}")
    print(f"   ‚Ä¢ –°—É–º–º–∞: {total_sum:,.2f} ‚ÇΩ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤
    print(f"\nüìã –ü–ï–†–í–´–ï 5 –ó–ê–ö–ê–ó–û–í:")
    for i, order in enumerate(filtered_orders_1[:5], 1):
        print(f"   {i}. –ó–∞–∫–∞–∑ {order['order_id']}")
        print(f"      ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {order['article']}")
        print(f"      ‚Ä¢ –¶–µ–Ω–∞: {order['price']} x {order['quantity']}")
        print(f"      ‚Ä¢ –°—Ç–∞—Ç—É—Å: {order['status']}")
        print(f"      ‚Ä¢ –í—Ä–µ–º—è: {order['date_msk'].strftime('%Y-%m-%d %H:%M MSK')}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∫–∏ 1 –¥–∞—Ç—ã: PASSED")
else:
    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∞")

# ============================================================================
# –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
# ============================================================================
print("\n" + "=" * 80)
print("‚úÖ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
print("=" * 80)

print(f"""
üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:

1. ‚úÖ –ü–ê–†–°–ò–ù–ì CSV
   ‚Ä¢ –§–∞–π–ª: {csv_file}
   ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}
   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {len(unique_dates)}
   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {sorted_dates[0]} ‚Üí {sorted_dates[-1]}

2. ‚úÖ –ö–ê–õ–ï–ù–î–ê–†–¨
   ‚Ä¢ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ {len(sorted_dates)} –¥–∞—Ç—ã
   ‚Ä¢ –î–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
   ‚Ä¢ –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: DD.MM.YYYY

3. ‚úÖ –í–´–ë–û–†–ö–ê 2 –î–ê–¢
   ‚Ä¢ –í—ã–±—Ä–∞–Ω—ã: {selected_dates_2[0]}, {selected_dates_2[-1]}
   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len([o for o in orders if o['date_only'] in selected_dates_2])}
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

4. ‚úÖ –í–´–ë–û–†–ö–ê 3 –î–ê–¢
   ‚Ä¢ –í—ã–±—Ä–∞–Ω—ã: {', '.join(selected_dates_3) if len(sorted_dates) >= 3 else 'N/A'}
   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len([o for o in orders if o['date_only'] in selected_dates_3]) if len(sorted_dates) >= 3 else 0}
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

5. ‚úÖ –í–´–ë–û–†–ö–ê 1 –î–ê–¢–´
   ‚Ä¢ –í—ã–±—Ä–∞–Ω–∞: {selected_date_1}
   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len([o for o in orders if o['date_only'] == selected_date_1])}
   ‚Ä¢ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞

üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!

üí° –í–´–í–û–î–´:
   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ FBO —Ñ–æ—Ä–º–∞—Ç–∞ (DD.MM.YYYY H:MM) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è UTC ‚Üí MSK (UTC+3) —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç —Å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏ (7:26 ‚Üí 07:26) –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
   ‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞—Ç
   ‚Ä¢ –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ CSV

‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   1. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ workflows –≤ n8n
   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º –≤ Telegram
   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –±–æ—Ç–µ
   4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç —Ä–∞–±–æ—Ç–∞—é—Ç
   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –±–æ—Ç–µ
""")

print("=" * 80)
print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
print("=" * 80)
