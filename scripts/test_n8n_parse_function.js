#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ parseAsMsk –∏–∑ N8N workflow
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ orders-2025-fbo-test.csv –∏ orders-2025-fbs-test.csv
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è parseAsMsk –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ workflow
function parseAsMsk(s) {
  if (!s) return null;
  let utcDate;
  const trimmed = s.trim();
  
  // FBO —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY H:MM –∏–ª–∏ DD.MM.YYYY HH:MM:SS
  if (/^\d{2}\.\d{2}\.\d{4} \d{1,2}:\d{2}(:\d{2})?$/.test(trimmed)) {
    const parts = trimmed.split(' ');
    const [d, m, y] = parts[0].split('.');
    let time = parts[1];
    
    // Hour padding –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —á–∞—Å–æ–≤
    if (time.length < 5) time = '0' + time;
    
    const isoStr = `${y}-${m}-${d}T${time.length === 5 ? time + ':00' : time}Z`;
    utcDate = new Date(isoStr);
  }
  // FBS —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS
  else if (/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/.test(trimmed)) {
    utcDate = new Date(trimmed.replace(' ', 'T') + 'Z');
  }
  // Fallback
  else {
    const t = Date.parse(s);
    if (Number.isFinite(t)) {
      utcDate = new Date(t);
    } else {
      utcDate = new Date(s);
    }
  }
  
  if (isNaN(utcDate)) return null;
  
  // UTC ‚Üí MSK (+3 —á–∞—Å–∞)
  return new Date(utcDate.getTime() + 3 * 3600 * 1000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV
function parseCSV(filePath, delimiter = ';') {
  let content = fs.readFileSync(filePath, 'utf-8');
  // –£–¥–∞–ª—è–µ–º BOM –µ—Å–ª–∏ –µ—Å—Ç—å
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  const lines = content.split('\n').filter(line => line.trim());
  
  if (lines.length === 0) return [];
  
  const headers = lines[0].split(delimiter).map(h => h.trim());
  const rows = [];
  
  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(delimiter);
    const row = {};
    
    headers.forEach((header, idx) => {
      row[header] = values[idx] ? values[idx].trim() : '';
    });
    
    rows.push(row);
  }
  
  return rows;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runTests() {
  console.log('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò parseAsMsk –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò');
  console.log('='.repeat(80));
  
  const results = {
    fbo: { total: 0, success: 0, errors: [], dates: new Set() },
    fbs: { total: 0, success: 0, errors: [], dates: new Set() }
  };
  
  // –¢–µ—Å—Ç FBO –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüì¶ –¢–ï–°–¢ 1: FBO –¥–∞–Ω–Ω—ã–µ (orders-2025-fbo-test.csv)');
  console.log('-'.repeat(80));
  
  const fboPath = path.join(__dirname, '../orders-2025-fbo-test.csv');
  
  if (fs.existsSync(fboPath)) {
    const fboRows = parseCSV(fboPath, ';');
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${fboRows.length}`);
    
    fboRows.forEach((row, idx) => {
      const dateStr = row['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'];
      if (!dateStr) return;
      
      results.fbo.total++;
      
      const parsed = parseAsMsk(dateStr);
      
      if (parsed && !isNaN(parsed.getTime())) {
        results.fbo.success++;
        
        const dateOnly = parsed.toISOString().split('T')[0];
        results.fbo.dates.add(dateOnly);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
        if (idx < 5) {
          const mskTime = parsed.toISOString().replace('T', ' ').slice(0, 16);
          console.log(`   ‚úÖ "${dateStr}" ‚Üí ${mskTime} MSK`);
        }
      } else {
        results.fbo.errors.push({ row: idx + 2, date: dateStr });
        if (results.fbo.errors.length <= 3) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: "${dateStr}" (—Å—Ç—Ä–æ–∫–∞ ${idx + 2})`);
        }
      }
    });
    
    console.log(`\n   –ò—Ç–æ–≥–æ:`);
    console.log(`      –í—Å–µ–≥–æ –¥–∞—Ç: ${results.fbo.total}`);
    console.log(`      –£—Å–ø–µ—à–Ω–æ: ${results.fbo.success} (${(results.fbo.success / results.fbo.total * 100).toFixed(1)}%)`);
    console.log(`      –û—à–∏–±–æ–∫: ${results.fbo.errors.length}`);
    console.log(`      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: ${results.fbo.dates.size}`);
    console.log(`      –î–∞—Ç—ã: ${Array.from(results.fbo.dates).sort().join(', ')}`);
  } else {
    console.log(`   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fboPath}`);
  }
  
  // –¢–µ—Å—Ç FBS –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüì¶ –¢–ï–°–¢ 2: FBS –¥–∞–Ω–Ω—ã–µ (orders-2025-fbs-test.csv)');
  console.log('-'.repeat(80));
  
  const fbsPath = path.join(__dirname, '../orders-2025-fbs-test.csv');
  
  if (fs.existsSync(fbsPath)) {
    const fbsRows = parseCSV(fbsPath, ';');
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${fbsRows.length}`);
    
    fbsRows.forEach((row, idx) => {
      const dateStr = row['–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É'];
      if (!dateStr) return;
      
      results.fbs.total++;
      
      const parsed = parseAsMsk(dateStr);
      
      if (parsed && !isNaN(parsed.getTime())) {
        results.fbs.success++;
        
        const dateOnly = parsed.toISOString().split('T')[0];
        results.fbs.dates.add(dateOnly);
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã (–∏—Ö –º–∞–ª–æ)
        if (idx < 10) {
          const mskTime = parsed.toISOString().replace('T', ' ').slice(0, 16);
          console.log(`   ‚úÖ "${dateStr}" ‚Üí ${mskTime} MSK`);
        }
      } else {
        results.fbs.errors.push({ row: idx + 2, date: dateStr });
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: "${dateStr}" (—Å—Ç—Ä–æ–∫–∞ ${idx + 2})`);
      }
    });
    
    console.log(`\n   –ò—Ç–æ–≥–æ:`);
    console.log(`      –í—Å–µ–≥–æ –¥–∞—Ç: ${results.fbs.total}`);
    console.log(`      –£—Å–ø–µ—à–Ω–æ: ${results.fbs.success} (${(results.fbs.success / results.fbs.total * 100).toFixed(1)}%)`);
    console.log(`      –û—à–∏–±–æ–∫: ${results.fbs.errors.length}`);
    console.log(`      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: ${results.fbs.dates.size}`);
    console.log(`      –î–∞—Ç—ã: ${Array.from(results.fbs.dates).sort().join(', ')}`);
  } else {
    console.log(`   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fbsPath}`);
  }
  
  // –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤
  console.log('\nüì¶ –¢–ï–°–¢ 3: –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤');
  console.log('-'.repeat(80));
  
  const testCases = [
    // FBO –¥–∞—Ç—ã –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ MSK (+3 —á–∞—Å–∞)
    { input: '01.10.2025 7:26', expected: '2025-10-01T10:26', desc: 'FBO: single-digit hour UTC‚ÜíMSK' },
    { input: '01.10.2025 17:30', expected: '2025-10-01T20:30', desc: 'FBO: double-digit hour UTC‚ÜíMSK' },
    { input: '02.09.2025 9:15', expected: '2025-09-02T12:15', desc: 'FBO: hour padding UTC‚ÜíMSK' },
    // FBS –¥–∞—Ç—ã –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ MSK (+3 —á–∞—Å–∞)
    { input: '2025-09-27 21:10:51', expected: '2025-09-28T00:10', desc: 'FBS: UTC to MSK (+3h)' },
    { input: '2025-09-28 10:20:17', expected: '2025-09-28T13:20', desc: 'FBS: mid-day UTC‚ÜíMSK' },
    { input: '2025-09-28 23:06:41', expected: '2025-09-29T02:06', desc: 'FBS: late evening UTC‚ÜíMSK' }
  ];
  
  let unitTestsPass = 0;
  let unitTestsFail = 0;
  
  testCases.forEach(test => {
    const parsed = parseAsMsk(test.input);
    
    if (parsed) {
      const result = parsed.toISOString().slice(0, 16);
      const pass = result === test.expected;
      
      if (pass) {
        console.log(`   ‚úÖ ${test.desc}`);
        console.log(`      Input: "${test.input}" ‚Üí ${result}`);
        unitTestsPass++;
      } else {
        console.log(`   ‚ùå ${test.desc}`);
        console.log(`      Input: "${test.input}"`);
        console.log(`      Expected: ${test.expected}`);
        console.log(`      Got: ${result}`);
        unitTestsFail++;
      }
    } else {
      console.log(`   ‚ùå ${test.desc} - –ø–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª null`);
      unitTestsFail++;
    }
  });
  
  console.log(`\n   –ò—Ç–æ–≥–æ:`);
  console.log(`      Passed: ${unitTestsPass}/${testCases.length}`);
  console.log(`      Failed: ${unitTestsFail}/${testCases.length}`);
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(80));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
  console.log('='.repeat(80));
  
  const totalTests = results.fbo.total + results.fbs.total;
  const totalSuccess = results.fbo.success + results.fbs.success;
  const totalErrors = results.fbo.errors.length + results.fbs.errors.length;
  
  console.log(`\n‚úÖ FBO: ${results.fbo.success}/${results.fbo.total} (${(results.fbo.success / results.fbo.total * 100).toFixed(1)}%)`);
  console.log(`‚úÖ FBS: ${results.fbs.success}/${results.fbs.total} (${(results.fbs.success / results.fbs.total * 100).toFixed(1)}%)`);
  console.log(`‚úÖ Unit tests: ${unitTestsPass}/${testCases.length} (${(unitTestsPass / testCases.length * 100).toFixed(1)}%)`);
  console.log(`\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –í—Å–µ–≥–æ –¥–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalTests}`);
  console.log(`   –£—Å–ø–µ—à–Ω–æ: ${totalSuccess} (${(totalSuccess / totalTests * 100).toFixed(1)}%)`);
  console.log(`   –û—à–∏–±–æ–∫: ${totalErrors}`);
  
  const allDates = new Set([...results.fbo.dates, ...results.fbs.dates]);
  console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –Ω–∞–π–¥–µ–Ω–æ: ${allDates.size}`);
  
  if (totalErrors === 0 && unitTestsFail === 0) {
    console.log(`\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –§—É–Ω–∫—Ü–∏—è parseAsMsk —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
    return 0;
  } else {
    console.log(`\n‚ö†Ô∏è –ï–°–¢–¨ –û–®–ò–ë–ö–ò! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.`);
    return 1;
  }
}

// –ó–∞–ø—É—Å–∫
const exitCode = runTests();
process.exit(exitCode);
