#!/usr/bin/env python3
"""
n8n Test Runner - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflows
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç n8n API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ workflows
"""

import requests
import json
import time
from typing import Dict, List, Any, Optional
from dataclasses import dataclass


@dataclass
class N8NConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n"""
    base_url: str = None
    api_key: str = None
    
    def __post_init__(self):
        import os
        self.base_url = self.base_url or os.getenv('N8N_BASE_URL', 'https://sirnokoknot.beget.app')
        self.api_key = self.api_key or os.getenv('N8N_API_KEY')
        
        if not self.api_key:
            raise ValueError(
                "N8N_API_KEY environment variable is required. "
                "Set it with: export N8N_API_KEY='your-api-key-here'"
            )
    
    @property
    def api_url(self) -> str:
        return f"{self.base_url}/api/v1"
    
    @property
    def headers(self) -> Dict[str, str]:
        return {
            "X-N8N-API-KEY": self.api_key,
            "Content-Type": "application/json"
        }


class N8NTestClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å n8n API"""
    
    def __init__(self, config: N8NConfig = None):
        self.config = config or N8NConfig()
    
    def list_workflows(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö workflows"""
        response = requests.get(
            f"{self.config.api_url}/workflows",
            headers=self.config.headers
        )
        response.raise_for_status()
        return response.json()["data"]
    
    def get_workflow(self, workflow_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π workflow"""
        response = requests.get(
            f"{self.config.api_url}/workflows/{workflow_id}",
            headers=self.config.headers
        )
        response.raise_for_status()
        return response.json()
    
    def import_workflow(self, workflow_path: str) -> str:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å workflow –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        with open(workflow_path, 'r', encoding='utf-8') as f:
            workflow_data = json.load(f)
        
        # –û—á–∏—â–∞–µ–º read-only –ø–æ–ª—è –¥–ª—è n8n API
        clean_workflow = {
            'name': workflow_data['name'],
            'nodes': workflow_data['nodes'],
            'connections': workflow_data['connections']
        }
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ settings
        if 'settings' in workflow_data and workflow_data['settings']:
            clean_workflow['settings'] = workflow_data['settings']
        
        response = requests.post(
            f"{self.config.api_url}/workflows",
            headers=self.config.headers,
            json=clean_workflow
        )
        response.raise_for_status()
        return response.json()["id"]
    
    def update_workflow(self, workflow_id: str, workflow_data: Dict) -> Dict:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π workflow"""
        response = requests.put(
            f"{self.config.api_url}/workflows/{workflow_id}",
            headers=self.config.headers,
            json=workflow_data
        )
        response.raise_for_status()
        return response.json()
    
    def execute_workflow(self, workflow_id: str, input_data: Dict = None) -> str:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å workflow
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç execution_id
        """
        payload = input_data or {}
        response = requests.post(
            f"{self.config.api_url}/workflows/{workflow_id}/run",
            headers=self.config.headers,
            json=payload
        )
        response.raise_for_status()
        return response.json()["data"]["executionId"]
    
    def get_execution(self, execution_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã execution"""
        response = requests.get(
            f"{self.config.api_url}/executions/{execution_id}",
            headers=self.config.headers
        )
        response.raise_for_status()
        return response.json()
    
    def wait_for_execution(
        self, 
        execution_id: str, 
        timeout: int = 30,
        poll_interval: float = 0.5
    ) -> Dict:
        """
        –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è execution
        
        Args:
            execution_id: ID execution
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫)
            poll_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)
        
        Returns:
            –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ execution
        
        Raises:
            TimeoutError: –ï—Å–ª–∏ execution –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ timeout
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            execution = self.get_execution(execution_id)
            
            if execution["finished"]:
                return execution
            
            time.sleep(poll_interval)
        
        raise TimeoutError(
            f"Execution {execution_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥"
        )
    
    def find_workflow_by_name(self, name: str) -> Optional[str]:
        """–ù–∞–π—Ç–∏ workflow ID –ø–æ –∏–º–µ–Ω–∏"""
        workflows = self.list_workflows()
        for wf in workflows:
            if wf["name"] == name:
                return wf["id"]
        return None


class WorkflowTestRunner:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è workflows"""
    
    def __init__(self, client: N8NTestClient = None):
        self.client = client or N8NTestClient()
    
    def run_test_workflow(self, test_workflow_name: str) -> Dict:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π workflow –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        Args:
            test_workflow_name: –ò–º—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ workflow (–Ω–∞–ø—Ä–∏–º–µ—Ä, "test_orders_menu_render")
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å assertions
        """
        # –ù–∞–π—Ç–∏ workflow –ø–æ –∏–º–µ–Ω–∏
        workflow_id = self.client.find_workflow_by_name(test_workflow_name)
        
        if not workflow_id:
            raise ValueError(f"Workflow '{test_workflow_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç: {test_workflow_name}")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å
        execution_id = self.client.execute_workflow(workflow_id)
        print(f"üìù Execution ID: {execution_id}")
        
        # –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        print("‚è≥ –ñ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        execution = self.client.wait_for_execution(execution_id, timeout=60)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        if execution["status"] == "error":
            print("‚ùå Execution –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return {
                "success": False,
                "error": execution.get("error", "Unknown error"),
                "execution_id": execution_id
            }
        
        # –ò–∑–≤–ª–µ—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–¥—ã
        result_data = self._extract_results(execution)
        
        return result_data
    
    def _extract_results(self, execution: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ execution –¥–∞–Ω–Ω—ã—Ö"""
        try:
            run_data = execution["data"]["resultData"]["runData"]
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–¥—É (–æ–±—ã—á–Ω–æ "Format Results" –∏–ª–∏ "Assertions")
            last_node_name = list(run_data.keys())[-1]
            last_node_data = run_data[last_node_name][0]["data"]["main"][0][0]["json"]
            
            return last_node_data
        
        except (KeyError, IndexError) as e:
            return {
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}",
                "raw_execution": execution
            }
    
    def print_test_results(self, results: Dict):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
        print("="*60)
        
        if not results.get("success", False):
            print("‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            if "error" in results:
                print(f"–û—à–∏–±–∫–∞: {results['error']}")
            return
        
        total = results.get("total", 0)
        passed = results.get("passed", 0)
        failed = results.get("failed", 0)
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}/{total}")
        print("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
        if "scenarios" in results:
            for idx, scenario in enumerate(results["scenarios"], 1):
                status = "‚úÖ" if scenario.get("passed") else "‚ùå"
                print(f"{status} –°—Ü–µ–Ω–∞—Ä–∏–π {idx}: {scenario.get('name', 'N/A')}")
                
                if not scenario.get("passed") and "assertions" in scenario:
                    for assertion in scenario["assertions"]:
                        if not assertion.get("passed"):
                            print(f"   ‚ùå {assertion.get('check', 'N/A')}")
                            print(f"      –û–∂–∏–¥–∞–ª–æ—Å—å: {assertion.get('expected')}")
                            print(f"      –ü–æ–ª—É—á–µ–Ω–æ: {assertion.get('actual')}")
        
        print("="*60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    runner = WorkflowTestRunner()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö workflows –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    test_workflows = [
        "test_orders_menu_render",
        "test_calendar_nav_guard",
        # –î–æ–±–∞–≤–ª—è–π —Å—é–¥–∞ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    ]
    
    all_passed = True
    
    for test_name in test_workflows:
        try:
            results = runner.run_test_workflow(test_name)
            runner.print_test_results(results)
            
            if not results.get("success", False):
                all_passed = False
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ '{test_name}': {e}")
            all_passed = False
    
    print("\n" + "="*60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    else:
        print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
    print("="*60)
    
    return 0 if all_passed else 1


if __name__ == "__main__":
    exit(main())
